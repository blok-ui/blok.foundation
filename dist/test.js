// Generated by Haxe 4.3.1
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class HxOverrides {
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		let i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
	static now() {
		return Date.now();
	}
}
HxOverrides.__name__ = "HxOverrides";
class Lambda {
	static has(it,elt) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(x1 == elt) {
				return true;
			}
		}
		return false;
	}
	static exists(it,f) {
		let x = $getIterator(it);
		while(x.hasNext()) {
			let x1 = x.next();
			if(f(x1)) {
				return true;
			}
		}
		return false;
	}
	static count(it,pred) {
		let n = 0;
		if(pred == null) {
			let _ = $getIterator(it);
			while(_.hasNext()) {
				_.next();
				++n;
			}
		} else {
			let x = $getIterator(it);
			while(x.hasNext()) {
				let x1 = x.next();
				if(pred(x1)) {
					++n;
				}
			}
		}
		return n;
	}
}
Lambda.__name__ = "Lambda";
Math.__name__ = "Math";
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( _g ) {
			return null;
		}
	}
	static fields(o) {
		let a = [];
		if(o != null) {
			let hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
}
Reflect.__name__ = "Reflect";
function Run_main() {
	blok_html_client_Client_mount(window.document.getElementById("root"),function() {
		return blok_foundation_core_PortalContext.provide(function() {
			return new blok_foundation_core_PortalContext({ target : window.document.getElementById("portal")});
		},function(_) {
			let this1 = new blok_signal_SignalObject(breeze_ClassName.ofArray(["display-flex","flex-direction-column","gap-0_75rem","p-2_5rem"].slice()));
			let this2 = new blok_signal_SignalObject(breeze_ClassName.ofArray(["display-flex","gap-0_75rem"].slice()));
			let tmp = ex_ModalExample.node({ });
			let tmp1 = ex_DropdownExample.node({ });
			let tmp2 = blok_html_Html.div({ className : this2},tmp,tmp1);
			let tmp3 = ex_CollapseExample.node({ });
			let tmp4 = ex_AnimatedExample.node({ });
			return blok_html_Html.div({ className : this1},tmp2,tmp3,tmp4);
		});
	});
}
class Std {
	static string(s) {
		return js_Boot.__string_rec(s,"");
	}
}
Std.__name__ = "Std";
class blok_adaptor_Adaptor {
}
blok_adaptor_Adaptor.__name__ = "blok.adaptor.Adaptor";
blok_adaptor_Adaptor.__isInterface__ = true;
Object.assign(blok_adaptor_Adaptor.prototype, {
	__class__: blok_adaptor_Adaptor
});
class blok_adaptor_RealNodeHost {
}
blok_adaptor_RealNodeHost.__name__ = "blok.adaptor.RealNodeHost";
blok_adaptor_RealNodeHost.__isInterface__ = true;
function blok_adaptor_RealNodeHostTools_findNearestRealNode(component) {
	return kit_MaybeTools.orThrow(kit_MaybeTools.map(component.findAncestor(function(component) {
		return js_Boot.__implements(component,blok_adaptor_RealNodeHost);
	}),function(component) {
		return component.getRealNode();
	}),"No real node found");
}
class blok_boundary_Boundary {
}
blok_boundary_Boundary.__name__ = "blok.boundary.Boundary";
blok_boundary_Boundary.__isInterface__ = true;
Object.assign(blok_boundary_Boundary.prototype, {
	__class__: blok_boundary_Boundary
});
function blok_boundary_BoundaryTools_findBoundary(component) {
	let _g = component.findAncestor(function(component) {
		return js_Boot.__implements(component,blok_boundary_Boundary);
	});
	switch(_g._hx_index) {
	case 0:
		return kit_Maybe.Some(_g.value);
	case 1:
		return kit_Maybe.None;
	}
}
function blok_boundary_BoundaryTools_tryToHandleWithBoundary(component,object) {
	let _g = blok_boundary_BoundaryTools_findBoundary(component);
	switch(_g._hx_index) {
	case 0:
		_g.value.handle(component,object);
		break;
	case 1:
		throw haxe_Exception.thrown(object);
	}
}
class blok_core_Disposable {
}
blok_core_Disposable.__name__ = "blok.core.Disposable";
blok_core_Disposable.__isInterface__ = true;
Object.assign(blok_core_Disposable.prototype, {
	__class__: blok_core_Disposable
});
class blok_context_Context {
}
blok_context_Context.__name__ = "blok.context.Context";
blok_context_Context.__isInterface__ = true;
blok_context_Context.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_context_Context.prototype, {
	__class__: blok_context_Context
});
class blok_core_DisposableHost {
}
blok_core_DisposableHost.__name__ = "blok.core.DisposableHost";
blok_core_DisposableHost.__isInterface__ = true;
Object.assign(blok_core_DisposableHost.prototype, {
	__class__: blok_core_DisposableHost
});
class blok_ui_ComponentBase {
	constructor() {
		if(blok_ui_ComponentBase._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.__disposables = new blok_core_DisposableCollection();
		this.__invalidChildren = [];
		this.__adaptor = null;
		this.__parent = null;
		this.__slot = null;
		this.__status = blok_ui_ComponentStatus.Pending;
	}
	mount(parent,slot) {
		this.__init(parent,slot);
		this.__status = blok_ui_ComponentStatus.Rendering;
		try {
			this.__initialize();
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			this.__cleanupAfterValidation();
			throw haxe_Exception.thrown(_g1);
		}
		this.__cleanupAfterValidation();
	}
	__init(parent,slot) {
		if(this.__status != blok_ui_ComponentStatus.Pending) {
			throw new blok_core_BlokComponentException("Attempted to initialize a component that has already been mounted",this);
		}
		this.__parent = parent;
		this.__slot = slot;
		if(this.__adaptor == null) {
			if(parent == null) {
				throw new blok_core_BlokComponentException("Failed assertion: parent != null",this);
			}
			this.__adaptor = parent.getAdaptor();
		}
	}
	update(node) {
		if(this.__status == blok_ui_ComponentStatus.Rendering) {
			throw new blok_core_BlokComponentException("Failed assertion: __status != Rendering",this);
		}
		if(this.__node == node) {
			this.__cleanupAfterValidation();
			return;
		}
		this.__status = blok_ui_ComponentStatus.Rendering;
		this.__node = node;
		this.__update();
		this.__cleanupAfterValidation();
	}
	invalidate() {
		if(this.__status == blok_ui_ComponentStatus.Invalid) {
			return;
		}
		this.__status = blok_ui_ComponentStatus.Invalid;
		let _g = this.__parent;
		if(_g == null) {
			this.scheduleValidation();
		} else {
			_g.scheduleChildForValidation(this);
		}
	}
	validate() {
		if(this.__status == blok_ui_ComponentStatus.Rendering) {
			throw new blok_core_BlokComponentException("Attempted to validate a Component that was already building",this);
		}
		if(this.__status == blok_ui_ComponentStatus.Disposing) {
			throw new blok_core_BlokComponentException("Attempted to validate a Component that was disposing",this);
		}
		if(this.__status == blok_ui_ComponentStatus.Disposed) {
			throw new blok_core_BlokComponentException("Attempted to validate a Component that was disposed",this);
		}
		if(this.__status != blok_ui_ComponentStatus.Invalid) {
			this.validateInvalidChildren();
			return;
		}
		this.__status = blok_ui_ComponentStatus.Rendering;
		this.__validate();
		this.__cleanupAfterValidation();
	}
	findAncestor(match) {
		let _g = this.__parent;
		if(_g == null) {
			return kit_Maybe.None;
		} else if(match(_g)) {
			return kit_Maybe.Some(_g);
		} else {
			return _g.findAncestor(match);
		}
	}
	findAncestorOfType(kind) {
		if(this.__parent == null) {
			return kit_Maybe.None;
		}
		let value = this.__parent;
		let _g = js_Boot.__downcastCheck(value,kind) ? value : null;
		if(_g == null) {
			return this.__parent.findAncestorOfType(kind);
		} else {
			return kit_Maybe.Some(_g);
		}
	}
	filterChildren(match,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		let results = [];
		this.visitChildren(function(child) {
			if(match(child)) {
				results.push(child);
			}
			if(recursive) {
				results = results.concat(child.filterChildren(match,true));
			}
			return true;
		});
		return results;
	}
	findChild(match,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		let result = null;
		this.visitChildren(function(child) {
			if(match(child)) {
				result = child;
				return false;
			}
			return true;
		});
		if(result == null) {
			if(recursive) {
				this.visitChildren(function(child) {
					let _g = child.findChild(match,true);
					switch(_g._hx_index) {
					case 0:
						result = _g.value;
						return false;
					case 1:
						return true;
					}
				});
				if(result == null) {
					return kit_Maybe.None;
				} else {
					return kit_Maybe.Some(result);
				}
			} else {
				return kit_Maybe.None;
			}
		} else {
			return kit_Maybe.Some(result);
		}
	}
	filterChildrenOfType(kind,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		return this.filterChildren(function(child) {
			return js_Boot.__instanceof(child,kind);
		},recursive);
	}
	findChildOfType(kind,recursive) {
		if(recursive == null) {
			recursive = false;
		}
		return this.findChild(function(child) {
			return js_Boot.__instanceof(child,kind);
		},recursive);
	}
	getAdaptor() {
		if(this.__adaptor == null) {
			throw new blok_core_BlokComponentException("Failed assertion: __adaptor != null",this);
		}
		return this.__adaptor;
	}
	createSlot(index,previous) {
		return new blok_ui_Slot(index,previous);
	}
	updateSlot(slot) {
		if(this.__slot == slot) {
			return;
		}
		let oldSlot = this.__slot;
		this.__slot = slot;
		this.__updateSlot(oldSlot,this.__slot);
	}
	scheduleValidation() {
		let adaptor = this.getAdaptor();
		let _gthis = this;
		adaptor.schedule(function() {
			_gthis.validate();
		});
	}
	__cleanupAfterValidation() {
		if(this.__invalidChildren.length > 0) {
			this.__invalidChildren = [];
		}
		if(this.__status != blok_ui_ComponentStatus.Invalid) {
			this.__status = blok_ui_ComponentStatus.Valid;
		}
	}
	scheduleChildForValidation(child) {
		if(this.__status == blok_ui_ComponentStatus.Invalid) {
			return;
		}
		if(this.__invalidChildren.includes(child)) {
			return;
		}
		this.__invalidChildren.push(child);
		if(this.__parent == null) {
			this.scheduleValidation();
			return;
		}
		this.__parent.scheduleChildForValidation(this);
	}
	validateInvalidChildren() {
		if(this.__invalidChildren.length == 0) {
			return;
		}
		let children = this.__invalidChildren.slice();
		this.__invalidChildren = [];
		let _g = 0;
		while(_g < children.length) {
			let child = children[_g];
			++_g;
			child.validate();
		}
	}
	addDisposable(disposable) {
		this.__disposables.addDisposable(disposable);
	}
	dispose() {
		if(this.__status == blok_ui_ComponentStatus.Rendering) {
			throw new blok_core_BlokComponentException("Attempted to dispose a component while it was building",this);
		}
		if(this.__status == blok_ui_ComponentStatus.Disposing) {
			throw new blok_core_BlokComponentException("Attempted to dispose a component that is already disposing",this);
		}
		if(this.__status == blok_ui_ComponentStatus.Disposed) {
			throw new blok_core_BlokComponentException("Attempted to dispose a component that was already disposed",this);
		}
		this.__status = blok_ui_ComponentStatus.Disposing;
		this.__invalidChildren = [];
		this.__disposables.dispose();
		this.__dispose();
		this.__slot = null;
		this.visitChildren(function(child) {
			child.dispose();
			return true;
		});
		this.__status = blok_ui_ComponentStatus.Disposed;
	}
}
blok_ui_ComponentBase.__name__ = "blok.ui.ComponentBase";
blok_ui_ComponentBase.__interfaces__ = [blok_core_DisposableHost,blok_core_Disposable];
Object.assign(blok_ui_ComponentBase.prototype, {
	__class__: blok_ui_ComponentBase
});
class blok_ui_Component extends blok_ui_ComponentBase {
	constructor() {
		if(blok_ui_ComponentBase._hx_skip_constructor) {
			super();
			return;
		}
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor();
	}
	_hx_constructor() {
		this.__rendered = null;
		this.__child = null;
		super._hx_constructor();
	}
	__render() {
		if(this.__rendered != null) {
			this.__rendered.dispose();
			this.__rendered = null;
		}
		let _gthis = this;
		blok_signal_Graph_withOwner(this,function() {
			let this1 = new blok_signal_ComputationObject(function() {
				switch(_gthis.__status._hx_index) {
				case 4:case 5:
					return blok_ui_Placeholder.node();
				default:
					let node;
					try {
						node = _gthis.render();
					} catch( _g ) {
						let _g1 = haxe_Exception.caught(_g).unwrap();
						blok_boundary_BoundaryTools_tryToHandleWithBoundary(_gthis,_g1);
						node = null;
					}
					if(_gthis.__status != blok_ui_ComponentStatus.Rendering) {
						_gthis.invalidate();
					}
					let tmp = node;
					if(tmp != null) {
						return tmp;
					} else {
						return blok_ui_Placeholder.node();
					}
				}
			},null);
			_gthis.__rendered = this1;
		});
		let tmp = this.__rendered;
		let tmp1 = tmp != null ? tmp.peek() : null;
		if(tmp1 != null) {
			return tmp1;
		} else {
			return blok_ui_Placeholder.node();
		}
	}
	__initialize() {
		this.__child = this.__render().createComponent();
		let tmp = this.__child;
		if(tmp != null) {
			tmp.mount(this,this.__slot);
		}
		blok_signal_Graph_withOwner(this,$bind(this,this.setup));
	}
	__update() {
		this.__updateProps();
		let tmp = this.__rendered;
		this.__child = blok_diffing_Differ_updateChild(this,this.__child,tmp != null ? tmp.peek() : null,this.__slot);
	}
	__validate() {
		let tmp = this.__rendered;
		this.__child = blok_diffing_Differ_updateChild(this,this.__child,tmp != null ? tmp.peek() : null,this.__slot);
	}
	__dispose() {
		this.__rendered = null;
	}
	__updateSlot(oldSlot,newSlot) {
		let tmp = this.__child;
		if(tmp != null) {
			tmp.updateSlot(newSlot);
		}
	}
	getRealNode() {
		let node = null;
		let _gthis = this;
		this.visitChildren(function(component) {
			if(node != null) {
				throw new blok_core_BlokComponentException("Component has more than one nodes",_gthis);
			}
			node = component.getRealNode();
			return true;
		});
		if(node == null) {
			throw new blok_core_BlokComponentException("Component does not have an node",this);
		}
		return node;
	}
	visitChildren(visitor) {
		if(this.__child != null) {
			visitor(this.__child);
		}
	}
}
blok_ui_Component.__name__ = "blok.ui.Component";
blok_ui_Component.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_Component.prototype, {
	__class__: blok_ui_Component
});
class kit_UniqueId {
}
class blok_context_Provider extends blok_ui_Component {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.context = null;
		super._hx_constructor();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_create = blok_signal_Signal.ofValue(props.create);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	setup() {
		let _gthis = this;
		this.addDisposable(new blok_core_DisposableCallback(function() {
			let tmp = _gthis.context;
			if(tmp != null) {
				tmp.dispose();
			}
			_gthis.context = null;
		}));
	}
	match(contextId) {
		let tmp = this.context;
		return (tmp != null ? tmp.__getContextId() : null) == contextId;
	}
	getContext() {
		if(this.context != null) {
			return kit_Maybe.Some(this.context);
		} else {
			return kit_Maybe.None;
		}
	}
	render() {
		let tmp = this.context;
		if(tmp != null) {
			tmp.dispose();
		}
		this.context = (this.get_create())();
		return (this.get_child())(this.context);
	}
	get_create() {
		return this.__backing_create.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_create.set(props.create);
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_context_Provider.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_context_Provider.componentType,props,function(node) {
			return new blok_context_Provider(node);
		},key);
	}
}
blok_context_Provider.__name__ = "blok.context.Provider";
blok_context_Provider.__super__ = blok_ui_Component;
Object.assign(blok_context_Provider.prototype, {
	__class__: blok_context_Provider
});
class haxe_Exception extends Error {
	constructor(message,previous,native) {
		super(message);
		this.message = message;
		this.__previousException = previous;
		this.__nativeException = native != null ? native : this;
	}
	unwrap() {
		return this.__nativeException;
	}
	toString() {
		return this.get_message();
	}
	get_message() {
		return this.message;
	}
	get_native() {
		return this.__nativeException;
	}
	static caught(value) {
		if(((value) instanceof haxe_Exception)) {
			return value;
		} else if(((value) instanceof Error)) {
			return new haxe_Exception(value.message,null,value);
		} else {
			return new haxe_ValueException(value,null,value);
		}
	}
	static thrown(value) {
		if(((value) instanceof haxe_Exception)) {
			return value.get_native();
		} else if(((value) instanceof Error)) {
			return value;
		} else {
			let e = new haxe_ValueException(value);
			return e;
		}
	}
}
haxe_Exception.__name__ = "haxe.Exception";
haxe_Exception.__super__ = Error;
Object.assign(haxe_Exception.prototype, {
	__class__: haxe_Exception
});
class blok_core_BlokException extends haxe_Exception {
	constructor(message,previous,native) {
		super(message,previous,native);
	}
}
blok_core_BlokException.__name__ = "blok.core.BlokException";
blok_core_BlokException.__super__ = haxe_Exception;
Object.assign(blok_core_BlokException.prototype, {
	__class__: blok_core_BlokException
});
class blok_core_BlokComponentException extends blok_core_BlokException {
	constructor(message,component) {
		super([message,"","Component tree:","",blok_core_BlokException_getComponentDescription(component)].join("\n"));
	}
}
blok_core_BlokComponentException.__name__ = "blok.core.BlokComponentException";
blok_core_BlokComponentException.__super__ = blok_core_BlokException;
Object.assign(blok_core_BlokComponentException.prototype, {
	__class__: blok_core_BlokComponentException
});
function blok_core_BlokException_getComponentDebugName(component) {
	let c = js_Boot.getClass(component);
	return c.__name__;
}
function blok_core_BlokException_getComponentDescription(component) {
	let name = blok_core_BlokException_getComponentDebugName(component);
	let ancestor = component.__parent;
	let _g = [];
	while(ancestor != null) {
		let name = blok_core_BlokException_getComponentDebugName(ancestor);
		ancestor = ancestor.__parent;
		_g.push(name);
	}
	_g.reverse();
	_g.push(name);
	let _g1 = [];
	let _g_current = 0;
	while(_g_current < _g.length) {
		let _g_value = _g[_g_current];
		let _g_key = _g_current++;
		let _g2 = [];
		let _g3 = 0;
		while(_g3 < _g_key) {
			++_g3;
			_g2.push("  ");
		}
		let padding = _g2.join("");
		if(_g_key == _g.length - 1) {
			_g1.push("" + padding + "-> " + _g_value);
		} else {
			_g1.push("" + padding + _g_value);
		}
	}
	return _g1.join("\n");
}
class blok_core_DisposableCollection {
	constructor() {
		this.disposables = new haxe_ds_List();
		this.isDisposed = false;
	}
	addDisposable(disposable) {
		if(this.isDisposed) {
			disposable.dispose();
			return;
		}
		this.disposables.add(disposable);
	}
	dispose() {
		this.isDisposed = true;
		let _g_head = this.disposables.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			this.disposables.remove(val);
			val.dispose();
		}
	}
}
blok_core_DisposableCollection.__name__ = "blok.core.DisposableCollection";
blok_core_DisposableCollection.__interfaces__ = [blok_core_DisposableHost,blok_core_Disposable];
Object.assign(blok_core_DisposableCollection.prototype, {
	__class__: blok_core_DisposableCollection
});
class blok_core_DisposableCallback {
	constructor(handler) {
		this.handler = handler;
	}
	dispose() {
		this.handler();
	}
}
blok_core_DisposableCallback.__name__ = "blok.core.DisposableCallback";
blok_core_DisposableCallback.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_core_DisposableCallback.prototype, {
	__class__: blok_core_DisposableCallback
});
class blok_data_Record {
	constructor() {
		if(blok_data_Record._hx_skip_constructor) {
			return;
		}
		this._hx_constructor();
	}
	_hx_constructor() {
		this.disposables = new blok_core_DisposableCollection();
	}
	addDisposable(disposable) {
		this.disposables.addDisposable(disposable);
	}
	dispose() {
		this.disposables.dispose();
	}
}
blok_data_Record.__name__ = "blok.data.Record";
blok_data_Record.__interfaces__ = [blok_core_DisposableHost,blok_core_Disposable];
Object.assign(blok_data_Record.prototype, {
	__class__: blok_data_Record
});
function blok_diffing_Differ_updateChild(parent,child,node,slot) {
	if(node == null) {
		if(child != null) {
			child.dispose();
		}
		return null;
	}
	if(child != null) {
		if(child.__node == node) {
			if(child.__slot.indexChanged(slot)) {
				child.updateSlot(slot);
			}
			return child;
		} else if(blok_diffing_Differ_canBeUpdatedByNode(child,node)) {
			if(child.__slot.indexChanged(slot)) {
				child.updateSlot(slot);
			}
			child.update(node);
			return child;
		} else {
			child.dispose();
			return blok_diffing_Differ_createComponentForVNode(parent,node,slot);
		}
	} else {
		return blok_diffing_Differ_createComponentForVNode(parent,node,slot);
	}
}
function blok_diffing_Differ_diffChildren(parent,oldChildren,newNodes) {
	let newHead = 0;
	let oldHead = 0;
	let newTail = newNodes.length - 1;
	let oldTail = oldChildren.length - 1;
	let previousChild = null;
	let newChildren = [];
	while(oldHead <= oldTail && newHead <= newTail) {
		let oldChild = oldChildren[oldHead];
		let newNode = newNodes[newHead];
		if(oldChild == null || !blok_diffing_Differ_canBeUpdatedByNode(oldChild,newNode)) {
			break;
		}
		let newChild = blok_diffing_Differ_updateChild(parent,oldChild,newNode,parent.createSlot(newHead,previousChild));
		newChildren[newHead] = newChild;
		previousChild = newChild;
		++newHead;
		++oldHead;
	}
	while(oldHead <= oldTail && newHead <= newTail) {
		let oldChild = oldChildren[oldTail];
		let newNode = newNodes[newTail];
		if(oldChild == null || !blok_diffing_Differ_canBeUpdatedByNode(oldChild,newNode)) {
			break;
		}
		--oldTail;
		--newTail;
	}
	let hasOldChildren = oldHead <= oldTail;
	let oldKeyedChildren = null;
	if(hasOldChildren) {
		oldKeyedChildren = new blok_diffing_KeyMap();
		while(oldHead <= oldTail) {
			let oldChild = oldChildren[oldHead];
			if(oldChild != null) {
				if(oldChild.__node.key != null) {
					oldKeyedChildren.set(oldChild.__node.key,oldChild);
				} else {
					oldChild.dispose();
				}
			}
			++oldHead;
		}
	}
	while(newHead <= newTail) {
		let oldChild = null;
		let newNode = newNodes[newHead];
		if(hasOldChildren) {
			let key = newNode.key;
			if(key != null) {
				if(oldKeyedChildren == null) {
					throw haxe_Exception.thrown("assert");
				}
				oldChild = oldKeyedChildren.get(key);
				if(oldChild != null) {
					if(blok_diffing_Differ_canBeUpdatedByNode(oldChild,newNode)) {
						oldKeyedChildren.remove(key);
					} else {
						oldChild = null;
					}
				}
			}
		}
		let newChild = blok_diffing_Differ_updateChild(parent,oldChild,newNode,parent.createSlot(newHead,previousChild));
		newChildren[newHead] = newChild;
		previousChild = newChild;
		++newHead;
	}
	newTail = newNodes.length - 1;
	oldTail = oldChildren.length - 1;
	while(oldHead <= oldTail && newHead <= newTail) {
		let oldChild = oldChildren[oldHead];
		let newNode = newNodes[newHead];
		let newChild = blok_diffing_Differ_updateChild(parent,oldChild,newNode,parent.createSlot(newHead,previousChild));
		newChildren[newHead] = newChild;
		previousChild = newChild;
		++newHead;
		++oldHead;
	}
	if(hasOldChildren && (oldKeyedChildren != null && oldKeyedChildren.isNotEmpty())) {
		oldKeyedChildren.each(function(_,element) {
			element.dispose();
		});
	}
	if(Lambda.exists(newChildren,function(el) {
		return el == null;
	})) {
		throw new blok_core_BlokException("Failed assertion: !Lambda.exists(newChildren, el -> el == null)");
	}
	return newChildren;
}
function blok_diffing_Differ_createComponentForVNode(parent,node,slot) {
	let element = node.createComponent();
	element.mount(parent,slot);
	return element;
}
function blok_diffing_Differ_canBeUpdatedByNode(component,node) {
	if(component.canBeUpdatedByNode(node)) {
		return component.__node.key == node.key;
	} else {
		return false;
	}
}
class blok_diffing_Key {
	static isString(this1) {
		return typeof(this1) == "string";
	}
}
class blok_diffing_KeyMap {
	constructor() {
		this.objects = null;
		this.strings = null;
	}
	set(key,value) {
		if(blok_diffing_Key.isString(key)) {
			let key1 = key;
			if(this.strings == null) {
				let _g = new haxe_ds_StringMap();
				_g.h[key1] = value;
				this.strings = _g;
			} else {
				this.strings.h[key1] = value;
			}
		} else if(this.objects == null) {
			let _g = new haxe_ds_ObjectMap();
			_g.set(key,value);
			this.objects = _g;
		} else {
			this.objects.set(key,value);
		}
	}
	get(key) {
		if(blok_diffing_Key.isString(key)) {
			let key1 = key;
			if(this.strings == null) {
				return null;
			} else {
				return this.strings.h[key1];
			}
		} else if(this.objects == null) {
			return null;
		} else {
			return this.objects.h[key.__id__];
		}
	}
	remove(key) {
		if(blok_diffing_Key.isString(key) && this.strings != null) {
			let key1 = key;
			let _this = this.strings;
			if(Object.prototype.hasOwnProperty.call(_this.h,key1)) {
				delete(_this.h[key1]);
			}
		} else if(this.objects != null) {
			this.objects.remove(key);
		}
	}
	isNotEmpty() {
		if(this.strings == null && this.objects == null) {
			return false;
		}
		let notEmpty = this.strings != null && Lambda.count(this.strings) > 0;
		if(!notEmpty) {
			notEmpty = this.objects != null && Lambda.count(this.objects) > 0;
		}
		return notEmpty;
	}
	each(fn) {
		if(this.strings != null) {
			let h = this.strings.h;
			let _g_keys = Object.keys(h);
			let _g_length = _g_keys.length;
			let _g_current = 0;
			while(_g_current < _g_length) {
				let key = _g_keys[_g_current++];
				let _g_value = h[key];
				fn(key,_g_value);
			}
		}
		if(this.objects != null) {
			let this1 = this.objects;
			let _g_keys = this1.keys();
			while(_g_keys.hasNext()) {
				let key = _g_keys.next();
				let _g_value = this1.get(key);
				fn(key,_g_value);
			}
		}
	}
}
blok_diffing_KeyMap.__name__ = "blok.diffing.KeyMap";
Object.assign(blok_diffing_KeyMap.prototype, {
	__class__: blok_diffing_KeyMap
});
class blok_foundation_accordion_AccordionContext {
	constructor(props) {
		this.status = 1;
		this.children = new haxe_ds_ObjectMap();
		this.sticky = props.sticky;
	}
	add(collapse) {
		let prev = this.status;
		this.status = 0;
		let _gthis = this;
		let this1 = this.children;
		let value = new blok_signal_Observer(function() {
			if(collapse.status.get() == true) {
				if(_gthis.status != 0 && !_gthis.sticky) {
					_gthis.status = 0;
					let this1 = _gthis.children;
					let _g_keys = this1.keys();
					while(_g_keys.hasNext()) {
						let key = _g_keys.next();
						this1.get(key);
						if(key != collapse) {
							key.collapse();
						}
					}
					_gthis.status = 1;
				}
			}
		});
		this1.set(collapse,value);
		this.status = prev;
	}
	remove(collapse) {
		let obs = this.children.h[collapse.__id__];
		if(obs != null) {
			obs.dispose();
			this.children.remove(collapse);
		}
	}
	dispose() {
		let items = this.children.keys();
		while(items.hasNext()) {
			let item = items.next();
			this.remove(item);
		}
	}
	__getContextId() {
		return blok_foundation_accordion_AccordionContext.__contextId;
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(blok_foundation_accordion_AccordionContext.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
blok_foundation_accordion_AccordionContext.__name__ = "blok.foundation.accordion.AccordionContext";
blok_foundation_accordion_AccordionContext.__interfaces__ = [blok_context_Context];
Object.assign(blok_foundation_accordion_AccordionContext.prototype, {
	__class__: blok_foundation_accordion_AccordionContext
});
class blok_foundation_animation_Animated extends blok_ui_Component {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.currentAnimation = null;
		this.currentKeyframes = null;
		super._hx_constructor();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_duration = blok_signal_Signal.ofValue(props.duration);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		let tmp = props.animateInitial;
		this.__backing_animateInitial = blok_signal_Signal.ofValue(tmp != null ? tmp : true);
		let tmp1 = props.repeatCurrentAnimation;
		this.__backing_repeatCurrentAnimation = blok_signal_Signal.ofValue(tmp1 != null && tmp1);
		let tmp2 = props.infinite;
		this.__backing_infinite = blok_signal_Signal.ofValue(tmp2 != null && tmp2);
		let tmp3 = props.easing;
		this.__backing_easing = blok_signal_Signal.ofValue(tmp3 != null ? tmp3 : "linear");
		let tmp4 = props.onFinished;
		this.__backing_onFinished = blok_signal_Signal.ofValue(tmp4 != null ? tmp4 : null);
		let tmp5 = props.onDispose;
		this.__backing_onDispose = blok_signal_Signal.ofValue(tmp5 != null ? tmp5 : null);
		let _gthis = this;
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this));
		try {
			this.__backing_keyframes = blok_signal_Signal.ofValue(props.keyframes);
			this.keyframes = new blok_signal_ComputationObject(function() {
				return _gthis.__backing_keyframes.get().get();
			},null);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			blok_signal_Graph_setCurrentOwner(prevOwner);
			throw haxe_Exception.thrown(_g1);
		}
		blok_signal_Graph_setCurrentOwner(prevOwner);
	}
	render() {
		return this.get_child();
	}
	setup() {
		let first = true;
		let _gthis = this;
		new blok_signal_Observer(function() {
			if(_gthis.currentAnimation != null) {
				_gthis.currentAnimation.cancel();
				_gthis.currentAnimation = null;
			}
			_gthis.registerAnimation(first);
			first = false;
		});
		this.addDisposable(new blok_core_DisposableCallback(function() {
			if(_gthis.get_onDispose() != null) {
				(_gthis.get_onDispose())(_gthis);
			}
		}));
	}
	registerAnimation(first) {
		if(first == null) {
			first = false;
		}
		switch(this.__status._hx_index) {
		case 4:case 5:
			return;
		default:
		}
		let el = this.getRealNode();
		let duration = first && !this.get_animateInitial() ? 0 : this.get_duration();
		let keyframes = this.keyframes.get();
		if(!this.get_repeatCurrentAnimation()) {
			if(this.currentKeyframes != null && this.currentKeyframes.equals(keyframes)) {
				return;
			}
		}
		this.currentKeyframes = keyframes;
		if(this.currentAnimation != null) {
			this.currentAnimation.cancel();
			this.currentAnimation = null;
		}
		let _gthis = this;
		let onFinished = function() {
			_gthis.currentAnimation = null;
			if(_gthis.get_onFinished() != null) {
				(_gthis.get_onFinished())(_gthis);
			}
		};
		this.currentAnimation = blok_foundation_animation_Animated_registerAnimations(el,keyframes.create(this),{ duration : duration, easing : this.get_easing(), iterations : this.get_infinite() ? Infinity : 1},onFinished);
	}
	get_duration() {
		return this.__backing_duration.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	get_animateInitial() {
		return this.__backing_animateInitial.get();
	}
	get_repeatCurrentAnimation() {
		return this.__backing_repeatCurrentAnimation.get();
	}
	get_infinite() {
		return this.__backing_infinite.get();
	}
	get_easing() {
		return this.__backing_easing.get();
	}
	get_onFinished() {
		return this.__backing_onFinished.get();
	}
	get_onDispose() {
		return this.__backing_onDispose.get();
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_duration.set(props.duration);
			_gthis.__backing_child.set(props.child);
			_gthis.__backing_animateInitial.set(props.animateInitial);
			_gthis.__backing_repeatCurrentAnimation.set(props.repeatCurrentAnimation);
			_gthis.__backing_infinite.set(props.infinite);
			_gthis.__backing_easing.set(props.easing);
			_gthis.__backing_onFinished.set(props.onFinished);
			_gthis.__backing_onDispose.set(props.onDispose);
			_gthis.__backing_keyframes.set(props.keyframes);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_animation_Animated.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_animation_Animated.componentType,props,function(node) {
			return new blok_foundation_animation_Animated(node);
		},key);
	}
}
blok_foundation_animation_Animated.__name__ = "blok.foundation.animation.Animated";
blok_foundation_animation_Animated.__super__ = blok_ui_Component;
Object.assign(blok_foundation_animation_Animated.prototype, {
	__class__: blok_foundation_animation_Animated
});
function blok_foundation_animation_Animated_registerAnimations(el,keyframes,options,onFinished) {
	let duration = blok_foundation_animation_Animated_prefersReducedMotion() ? 0 : options.duration;
	let animation = el.animate(keyframes,{ duration : duration, easing : options.easing, iterations : options.iterations});
	animation.addEventListener("finish",onFinished,{ once : true});
	return animation;
}
function blok_foundation_animation_Animated_prefersReducedMotion() {
	let query = window.matchMedia("(prefers-reduced-motion: reduce)");
	return query.matches;
}
function blok_foundation_animation_AnimatedModifiers_animateForever(child,id,factory,options) {
	let this1 = new blok_signal_SignalObject(new blok_foundation_animation_Keyframes(id,factory));
	let tmp = options != null ? options.duration : null;
	return blok_foundation_animation_Animated.node({ keyframes : this1, duration : tmp != null ? tmp : 300, easing : options != null ? options.easing : null, child : child, infinite : true});
}
class blok_foundation_animation_Keyframes {
	constructor(id,factory) {
		this.id = id;
		this.factory = factory;
	}
	equals(other) {
		return this.id == other.id;
	}
	create(context) {
		return this.factory(context);
	}
}
blok_foundation_animation_Keyframes.__name__ = "blok.foundation.animation.Keyframes";
Object.assign(blok_foundation_animation_Keyframes.prototype, {
	__class__: blok_foundation_animation_Keyframes
});
class blok_foundation_collapse_Collapse extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		let tmp = props.initialStatus;
		this.__backing_initialStatus = blok_signal_Signal.ofValue(tmp != null && tmp);
		let tmp1 = props.duration;
		this.__backing_duration = blok_signal_Signal.ofValue(tmp1 != null ? tmp1 : 200);
	}
	render() {
		let _gthis = this;
		return blok_foundation_collapse_CollapseContext.provide(function() {
			return new blok_foundation_collapse_CollapseContext({ accordion : blok_foundation_accordion_AccordionContext.maybeFrom(_gthis), status : _gthis.get_initialStatus(), duration : _gthis.get_duration()});
		},function(_) {
			return _gthis.get_child();
		});
	}
	get_child() {
		return this.__backing_child.get();
	}
	get_initialStatus() {
		return this.__backing_initialStatus.get();
	}
	get_duration() {
		return this.__backing_duration.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
			_gthis.__backing_initialStatus.set(props.initialStatus);
			_gthis.__backing_duration.set(props.duration);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_collapse_Collapse.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_collapse_Collapse.componentType,props,function(node) {
			return new blok_foundation_collapse_Collapse(node);
		},key);
	}
}
blok_foundation_collapse_Collapse.__name__ = "blok.foundation.collapse.Collapse";
blok_foundation_collapse_Collapse.__super__ = blok_ui_Component;
Object.assign(blok_foundation_collapse_Collapse.prototype, {
	__class__: blok_foundation_collapse_Collapse
});
class blok_foundation_collapse_CollapseContext extends blok_data_Record {
	constructor(props) {
		blok_data_Record._hx_skip_constructor = true;
		super();
		blok_data_Record._hx_skip_constructor = false;
		this._hx_constructor(props);
	}
	_hx_constructor(props) {
		this.duration = 200;
		this.accordion = kit_Maybe.None;
		super._hx_constructor();
		if(props.accordion != null) {
			this.accordion = props.accordion;
		}
		if(props.duration != null) {
			this.duration = props.duration;
		}
		this.status = blok_signal_Signal.ofValue(props.status);
		let _gthis = this;
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this));
		try {
			this.init = new blok_signal_ComputationObject(function() {
				let __target = _gthis.accordion;
				if(__target._hx_index == 0) {
					__target.value.add(_gthis);
				}
				return 0;
			},null);
		} catch( _g ) {
			let _g1 = haxe_Exception.caught(_g);
			blok_signal_Graph_setCurrentOwner(prevOwner);
			throw haxe_Exception.thrown(_g1);
		}
		blok_signal_Graph_setCurrentOwner(prevOwner);
	}
	toggle() {
		if(this.status.peek()) {
			this.collapse();
		} else {
			this.expand();
		}
	}
	expand() {
		this.status.set(true);
	}
	collapse() {
		this.status.set(false);
	}
	dispose() {
		let __target = this.accordion;
		if(__target._hx_index == 0) {
			__target.value.remove(this);
		}
	}
	__getContextId() {
		return blok_foundation_collapse_CollapseContext.__contextId;
	}
	static provide(create,child,key) {
		return blok_context_Provider.node({ create : create, child : child});
	}
	static from(context) {
		return kit_MaybeTools.or(blok_foundation_collapse_CollapseContext.maybeFrom(context),new kit_SimpleLazyObject(function() {
			return new blok_foundation_collapse_CollapseContext({ status : true});
		}));
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(blok_foundation_collapse_CollapseContext.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
blok_foundation_collapse_CollapseContext.__name__ = "blok.foundation.collapse.CollapseContext";
blok_foundation_collapse_CollapseContext.__interfaces__ = [blok_context_Context];
blok_foundation_collapse_CollapseContext.__super__ = blok_data_Record;
Object.assign(blok_foundation_collapse_CollapseContext.prototype, {
	__class__: blok_foundation_collapse_CollapseContext
});
class blok_foundation_collapse_CollapseItem extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		let collapse = blok_foundation_collapse_CollapseContext.from(this);
		let _gthis = this;
		let transform = function(status) {
			if(status) {
				return new blok_foundation_animation_Keyframes("out",function(context) {
					let transform = blok_foundation_collapse_CollapseItem_getHeight(context);
					return [{ height : 0, offset : 0},{ height : transform, offset : 1}];
				});
			} else {
				return new blok_foundation_animation_Keyframes("in",function(context) {
					return [{ height : blok_foundation_collapse_CollapseItem_getHeight(context), offset : 0},{ height : 0, offset : 1}];
				});
			}
		};
		let _gthis1 = collapse.status;
		return blok_foundation_animation_Animated.node({ keyframes : new blok_signal_ComputationObject(function() {
			return transform(_gthis1.get());
		},null), onFinished : function(context) {
			let el = _gthis.getRealNode();
			if(collapse.status.peek()) {
				el.style.height = "auto";
			} else {
				el.style.height = "0";
			}
		}, duration : collapse.duration, child : this.get_child()});
	}
	get_child() {
		return this.__backing_child.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_collapse_CollapseItem.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_collapse_CollapseItem.componentType,props,function(node) {
			return new blok_foundation_collapse_CollapseItem(node);
		},key);
	}
}
blok_foundation_collapse_CollapseItem.__name__ = "blok.foundation.collapse.CollapseItem";
blok_foundation_collapse_CollapseItem.__super__ = blok_ui_Component;
Object.assign(blok_foundation_collapse_CollapseItem.prototype, {
	__class__: blok_foundation_collapse_CollapseItem
});
function blok_foundation_collapse_CollapseItem_getHeight(context) {
	let el = context.getRealNode();
	return el.scrollHeight + "px";
}
class blok_foundation_core_FocusContext {
	constructor() {
		this.previous = null;
	}
	focus(object) {
		let el = object;
		if(this.previous == null) {
			this.previous = el.ownerDocument.activeElement;
		}
		el.focus();
	}
	returnFocus() {
		if(this.previous != null) {
			this.previous.focus();
			this.previous = null;
		}
	}
	dispose() {
	}
	__getContextId() {
		return blok_foundation_core_FocusContext.__contextId;
	}
	static instance() {
		if(blok_foundation_core_FocusContext.instance_context == null) {
			blok_foundation_core_FocusContext.instance_context = new blok_foundation_core_FocusContext();
		}
		return blok_foundation_core_FocusContext.instance_context;
	}
	static from(context) {
		return kit_MaybeTools.or(blok_foundation_core_FocusContext.maybeFrom(context),new kit_SimpleLazyObject(function() {
			return blok_foundation_core_FocusContext.instance();
		}));
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(blok_foundation_core_FocusContext.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
blok_foundation_core_FocusContext.__name__ = "blok.foundation.core.FocusContext";
blok_foundation_core_FocusContext.__interfaces__ = [blok_context_Context];
Object.assign(blok_foundation_core_FocusContext.prototype, {
	__class__: blok_foundation_core_FocusContext
});
class blok_foundation_core_PortalContext extends blok_data_Record {
	constructor(props) {
		super();
		this.target = props.target;
	}
	__getContextId() {
		return blok_foundation_core_PortalContext.__contextId;
	}
	static provide(create,child,key) {
		return blok_context_Provider.node({ create : create, child : child});
	}
	static from(context) {
		return kit_MaybeTools.or(blok_foundation_core_PortalContext.maybeFrom(context),new kit_SimpleLazyObject(function() {
			return new blok_foundation_core_PortalContext({ target : window.document.getElementById("portal")});
		}));
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(blok_foundation_core_PortalContext.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
blok_foundation_core_PortalContext.__name__ = "blok.foundation.core.PortalContext";
blok_foundation_core_PortalContext.__interfaces__ = [blok_context_Context];
blok_foundation_core_PortalContext.__super__ = blok_data_Record;
Object.assign(blok_foundation_core_PortalContext.prototype, {
	__class__: blok_foundation_core_PortalContext
});
class blok_foundation_core_Positioned extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_getTarget = blok_signal_Signal.ofValue(props.getTarget);
		this.__backing_attachment = blok_signal_Signal.ofValue(props.attachment);
		let tmp = props.gap;
		this.__backing_gap = blok_signal_Signal.ofValue(tmp != null ? tmp : 0);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		return this.get_child();
	}
	setup() {
		let $window = window;
		let el = this.getRealNode();
		el.style.position = "fixed";
		el.style.zIndex = "9000";
		$window.addEventListener("resize",$bind(this,this.positionElement));
		$window.addEventListener("scroll",$bind(this,this.positionElement));
		this.positionElement();
		let _gthis = this;
		this.addDisposable(new blok_core_DisposableCallback(function() {
			$window.removeEventListener("resize",$bind(_gthis,_gthis.positionElement));
			$window.removeEventListener("scroll",$bind(_gthis,_gthis.positionElement));
		}));
	}
	positionElement() {
		let el = this.getRealNode();
		let target = (this.get_getTarget())();
		let targetRect = target.getBoundingClientRect();
		let container = blok_foundation_core_Positioned_getContainerSize();
		let vAttachment = this.get_attachment().v;
		let hAttachment = this.get_attachment().h;
		let top;
		switch(vAttachment._hx_index) {
		case 0:
			top = targetRect.top - el.offsetHeight;
			break;
		case 1:
			top = targetRect.bottom;
			break;
		case 2:
			top = targetRect.top + target.offsetHeight / 2 - el.offsetHeight / 2;
			break;
		}
		let left;
		switch(hAttachment._hx_index) {
		case 0:
			left = targetRect.left - el.offsetWidth;
			break;
		case 1:
			left = targetRect.right;
			break;
		case 2:
			left = targetRect.left + target.offsetWidth / 2 - el.offsetWidth / 2;
			break;
		case 3:
			left = targetRect.left;
			break;
		case 4:
			left = targetRect.right - el.offsetWidth;
			break;
		}
		if(blok_foundation_core_Positioned_overflowsVertical(top,el.offsetHeight)) {
			switch(vAttachment._hx_index) {
			case 0:
				top = top > 0 ? container.bottom - el.offsetHeight : 0;
				break;
			case 1:
				top = top > 0 ? targetRect.top - el.offsetHeight : 0;
				break;
			case 2:
				top = top > 0 ? targetRect.top : 0;
				break;
			}
		}
		if(blok_foundation_core_Positioned_overflowsHorizontal(left,el.offsetWidth)) {
			switch(hAttachment._hx_index) {
			case 2:
				left = left > 0 ? targetRect.right - el.offsetWidth : 0;
				break;
			case 0:case 3:
				left = 0;
				break;
			case 1:case 4:
				left = targetRect.right - el.offsetWidth;
				break;
			}
		}
		if(this.get_gap() > 0) {
			let _g = this.get_attachment();
			let _g1 = _g.h;
			switch(_g.v._hx_index) {
			case 0:
				top -= this.get_gap();
				break;
			case 1:
				top += this.get_gap();
				break;
			case 2:
				if(_g1._hx_index == 2) {
					this.get_gap();
				}
				break;
			}
		}
		el.style.top = "" + top + "px";
		el.style.left = "" + left + "px";
	}
	get_getTarget() {
		return this.__backing_getTarget.get();
	}
	get_attachment() {
		return this.__backing_attachment.get();
	}
	get_gap() {
		return this.__backing_gap.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_getTarget.set(props.getTarget);
			_gthis.__backing_attachment.set(props.attachment);
			_gthis.__backing_gap.set(props.gap);
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_core_Positioned.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_core_Positioned.componentType,props,function(node) {
			return new blok_foundation_core_Positioned(node);
		},key);
	}
}
blok_foundation_core_Positioned.__name__ = "blok.foundation.core.Positioned";
blok_foundation_core_Positioned.__super__ = blok_ui_Component;
Object.assign(blok_foundation_core_Positioned.prototype, {
	__class__: blok_foundation_core_Positioned
});
function blok_foundation_core_Positioned_getContainerSize() {
	return { left : 0, top : 0, bottom : window.outerHeight, right : window.outerWidth};
}
function blok_foundation_core_Positioned_overflowsVertical(top,height) {
	if(!(top < 0)) {
		return top + height >= blok_foundation_core_Positioned_getContainerSize().bottom;
	} else {
		return true;
	}
}
function blok_foundation_core_Positioned_overflowsHorizontal(left,width) {
	if(!(left < 0)) {
		return left + width >= blok_foundation_core_Positioned_getContainerSize().right;
	} else {
		return true;
	}
}
var blok_foundation_core_PositionedAttachmentVertical = $hxEnums["blok.foundation.core.PositionedAttachmentVertical"] = { __ename__:true,__constructs__:null
	,Top: {_hx_name:"Top",_hx_index:0,__enum__:"blok.foundation.core.PositionedAttachmentVertical",toString:$estr}
	,Bottom: {_hx_name:"Bottom",_hx_index:1,__enum__:"blok.foundation.core.PositionedAttachmentVertical",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:2,__enum__:"blok.foundation.core.PositionedAttachmentVertical",toString:$estr}
};
blok_foundation_core_PositionedAttachmentVertical.__constructs__ = [blok_foundation_core_PositionedAttachmentVertical.Top,blok_foundation_core_PositionedAttachmentVertical.Bottom,blok_foundation_core_PositionedAttachmentVertical.Middle];
var blok_foundation_core_PositionedAttachmentHorizontal = $hxEnums["blok.foundation.core.PositionedAttachmentHorizontal"] = { __ename__:true,__constructs__:null
	,Left: {_hx_name:"Left",_hx_index:0,__enum__:"blok.foundation.core.PositionedAttachmentHorizontal",toString:$estr}
	,Right: {_hx_name:"Right",_hx_index:1,__enum__:"blok.foundation.core.PositionedAttachmentHorizontal",toString:$estr}
	,Middle: {_hx_name:"Middle",_hx_index:2,__enum__:"blok.foundation.core.PositionedAttachmentHorizontal",toString:$estr}
	,MatchLeft: {_hx_name:"MatchLeft",_hx_index:3,__enum__:"blok.foundation.core.PositionedAttachmentHorizontal",toString:$estr}
	,MatchRight: {_hx_name:"MatchRight",_hx_index:4,__enum__:"blok.foundation.core.PositionedAttachmentHorizontal",toString:$estr}
};
blok_foundation_core_PositionedAttachmentHorizontal.__constructs__ = [blok_foundation_core_PositionedAttachmentHorizontal.Left,blok_foundation_core_PositionedAttachmentHorizontal.Right,blok_foundation_core_PositionedAttachmentHorizontal.Middle,blok_foundation_core_PositionedAttachmentHorizontal.MatchLeft,blok_foundation_core_PositionedAttachmentHorizontal.MatchRight];
class blok_foundation_core_ScrollLocked extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		return this.get_child();
	}
	setup() {
		let body = window.document.body;
		let beforeWidth = body.offsetWidth;
		body.setAttribute("style","overflow:hidden;");
		let afterWidth = body.offsetWidth;
		let offset = afterWidth - beforeWidth;
		if(offset > 0) {
			body.style.overflow = "hidden";
			body.style.paddingRight = "" + offset + "px";
		}
		this.addDisposable(new blok_core_DisposableCallback(function() {
			body.style.overflow = null;
			body.style.paddingRight = null;
		}));
	}
	get_child() {
		return this.__backing_child.get();
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_core_ScrollLocked.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_core_ScrollLocked.componentType,props,function(node) {
			return new blok_foundation_core_ScrollLocked(node);
		},key);
	}
}
blok_foundation_core_ScrollLocked.__name__ = "blok.foundation.core.ScrollLocked";
blok_foundation_core_ScrollLocked.__super__ = blok_ui_Component;
Object.assign(blok_foundation_core_ScrollLocked.prototype, {
	__class__: blok_foundation_core_ScrollLocked
});
class blok_foundation_dropdown_Dropdown extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		let tmp = props.attachment;
		this.__backing_attachment = blok_signal_Signal.ofValue(tmp != null ? tmp : { h : blok_foundation_core_PositionedAttachmentHorizontal.Middle, v : blok_foundation_core_PositionedAttachmentVertical.Bottom});
		let tmp1 = props.gap;
		this.__backing_gap = blok_signal_Signal.ofValue(tmp1 != null ? tmp1 : 0);
		this.__backing_toggle = blok_signal_Signal.ofValue(props.toggle);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		let tmp2 = props.status;
		this.__backing_status = blok_signal_Signal.ofValue(tmp2 != null && tmp2);
	}
	render() {
		let _gthis = this;
		return blok_foundation_dropdown_DropdownContext.provide(function() {
			return new blok_foundation_dropdown_DropdownContext({ status : _gthis.get_status(), attachment : _gthis.get_attachment(), gap : _gthis.get_gap()});
		},function(dropdown) {
			return blok_foundation_dropdown_DropdownContainer.node({ children : [blok_foundation_dropdown_DropdownToggle.node({ child : (_gthis.get_toggle())(dropdown)}),blok_ui_Scope.node({ child : function(context) {
				if(dropdown.status.get()) {
					return blok_foundation_dropdown_DropdownPanel.node({ onHide : function() {
						dropdown.close();
					}, attachment : _gthis.get_attachment(), gap : _gthis.get_gap(), child : (_gthis.get_child())(dropdown)});
				} else {
					return blok_ui_Placeholder.node();
				}
			}})]});
		});
	}
	get_attachment() {
		return this.__backing_attachment.get();
	}
	get_gap() {
		return this.__backing_gap.get();
	}
	get_toggle() {
		return this.__backing_toggle.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	get_status() {
		return this.__backing_status.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_attachment.set(props.attachment);
			_gthis.__backing_gap.set(props.gap);
			_gthis.__backing_toggle.set(props.toggle);
			_gthis.__backing_child.set(props.child);
			_gthis.__backing_status.set(props.status);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_dropdown_Dropdown.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_dropdown_Dropdown.componentType,props,function(node) {
			return new blok_foundation_dropdown_Dropdown(node);
		},key);
	}
}
blok_foundation_dropdown_Dropdown.__name__ = "blok.foundation.dropdown.Dropdown";
blok_foundation_dropdown_Dropdown.__super__ = blok_ui_Component;
Object.assign(blok_foundation_dropdown_Dropdown.prototype, {
	__class__: blok_foundation_dropdown_Dropdown
});
class blok_foundation_dropdown_DropdownContainer extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_children = blok_signal_Signal.ofValue(props.children);
	}
	render() {
		return blok_ui_Fragment.node(...this.get_children());
	}
	get_children() {
		return this.__backing_children.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_children.set(props.children);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_dropdown_DropdownContainer.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_dropdown_DropdownContainer.componentType,props,function(node) {
			return new blok_foundation_dropdown_DropdownContainer(node);
		},key);
	}
}
blok_foundation_dropdown_DropdownContainer.__name__ = "blok.foundation.dropdown.DropdownContainer";
blok_foundation_dropdown_DropdownContainer.__super__ = blok_ui_Component;
Object.assign(blok_foundation_dropdown_DropdownContainer.prototype, {
	__class__: blok_foundation_dropdown_DropdownContainer
});
class blok_foundation_dropdown_DropdownContext extends blok_data_Record {
	constructor(props) {
		super();
		this.attachment = props.attachment;
		this.gap = props.gap;
		this.status = blok_signal_Signal.ofValue(props.status);
	}
	close() {
		this.status.set(false);
	}
	toggle() {
		this.status.update(function(status) {
			if(status == true) {
				return false;
			} else {
				return true;
			}
		});
	}
	__getContextId() {
		return blok_foundation_dropdown_DropdownContext.__contextId;
	}
	static provide(create,child,key) {
		return blok_context_Provider.node({ create : create, child : child});
	}
	static from(context) {
		return kit_MaybeTools.or(blok_foundation_dropdown_DropdownContext.maybeFrom(context),new kit_SimpleLazyObject(function() {
			throw new blok_core_BlokException("No DropdownContext found");
		}));
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(blok_foundation_dropdown_DropdownContext.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
blok_foundation_dropdown_DropdownContext.__name__ = "blok.foundation.dropdown.DropdownContext";
blok_foundation_dropdown_DropdownContext.__interfaces__ = [blok_context_Context];
blok_foundation_dropdown_DropdownContext.__super__ = blok_data_Record;
Object.assign(blok_foundation_dropdown_DropdownContext.prototype, {
	__class__: blok_foundation_dropdown_DropdownContext
});
class blok_foundation_dropdown_DropdownItem extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		return this.get_child();
	}
	get_child() {
		return this.__backing_child.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_dropdown_DropdownItem.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_dropdown_DropdownItem.componentType,props,function(node) {
			return new blok_foundation_dropdown_DropdownItem(node);
		},key);
	}
}
blok_foundation_dropdown_DropdownItem.__name__ = "blok.foundation.dropdown.DropdownItem";
blok_foundation_dropdown_DropdownItem.__super__ = blok_ui_Component;
Object.assign(blok_foundation_dropdown_DropdownItem.prototype, {
	__class__: blok_foundation_dropdown_DropdownItem
});
class blok_foundation_dropdown_DropdownPanel extends blok_ui_Component {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.current = null;
		super._hx_constructor();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_onHide = blok_signal_Signal.ofValue(props.onHide);
		this.__backing_gap = blok_signal_Signal.ofValue(props.gap);
		this.__backing_attachment = blok_signal_Signal.ofValue(props.attachment);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		let _gthis = this;
		return blok_foundation_layer_Popover.node({ getTarget : function() {
			return kit_MaybeTools.orThrow(kit_MaybeTools.orThrow(_gthis.findAncestorOfType(blok_foundation_dropdown_Dropdown),"No Dropdown").findChildOfType(blok_foundation_dropdown_DropdownToggle,true),"No dropdown toggle").getRealNode();
		}, gap : this.get_gap(), attachment : this.get_attachment(), child : this.get_child()});
	}
	setup() {
		let document = window.document;
		document.addEventListener("keydown",$bind(this,this.onKeyDown));
		document.addEventListener("click",$bind(this,this.hide));
		this.maybeFocusFirst();
		let _gthis = this;
		this.addDisposable(new blok_core_DisposableCallback(function() {
			document.removeEventListener("keydown",$bind(_gthis,_gthis.onKeyDown));
			document.removeEventListener("click",$bind(_gthis,_gthis.hide));
			blok_foundation_core_FocusContext.from(_gthis).returnFocus();
		}));
	}
	hide(e) {
		e.stopPropagation();
		e.preventDefault();
		(this.get_onHide())();
	}
	getNextFocusedChild(offset) {
		let items = this.filterChildrenOfType(blok_foundation_dropdown_DropdownItem,true);
		let index = Math.ceil(items.indexOf(this.current) + offset);
		let item = items[index];
		if(item != null) {
			this.current = item;
			return kit_Maybe.Some(this.current);
		}
		return kit_Maybe.None;
	}
	maybeFocusFirst() {
		let _g = this.getNextFocusedChild(1);
		switch(_g._hx_index) {
		case 0:
			let el = _g.value.getRealNode();
			blok_foundation_core_FocusContext.from(this).focus(el);
			break;
		case 1:
			break;
		}
	}
	focusNext(e,hideIfLast) {
		if(hideIfLast == null) {
			hideIfLast = false;
		}
		e.preventDefault();
		let _g = this.getNextFocusedChild(1);
		switch(_g._hx_index) {
		case 0:
			_g.value.getRealNode().focus();
			break;
		case 1:
			if(hideIfLast) {
				this.hide(e);
			}
			break;
		}
	}
	focusPrevious(e,hideIfFirst) {
		if(hideIfFirst == null) {
			hideIfFirst = false;
		}
		e.preventDefault();
		let _g = this.getNextFocusedChild(-1);
		switch(_g._hx_index) {
		case 0:
			_g.value.getRealNode().focus();
			break;
		case 1:
			if(hideIfFirst) {
				this.hide(e);
			}
			break;
		}
	}
	onKeyDown(event) {
		switch(this.__status._hx_index) {
		case 3:case 4:case 5:
			return;
		default:
		}
		switch(event.key) {
		case "ArrowDown":
			this.focusNext(event);
			break;
		case "ArrowUp":
			this.focusPrevious(event);
			break;
		case "Escape":
			this.hide(event);
			break;
		case "Home":
			this.maybeFocusFirst();
			break;
		case "Tab":
			if(event.getModifierState("Shift")) {
				this.focusPrevious(event,true);
			} else {
				this.focusNext(event,true);
			}
			break;
		default:
		}
	}
	get_onHide() {
		return this.__backing_onHide.get();
	}
	get_gap() {
		return this.__backing_gap.get();
	}
	get_attachment() {
		return this.__backing_attachment.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_onHide.set(props.onHide);
			_gthis.__backing_gap.set(props.gap);
			_gthis.__backing_attachment.set(props.attachment);
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_dropdown_DropdownPanel.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_dropdown_DropdownPanel.componentType,props,function(node) {
			return new blok_foundation_dropdown_DropdownPanel(node);
		},key);
	}
}
blok_foundation_dropdown_DropdownPanel.__name__ = "blok.foundation.dropdown.DropdownPanel";
blok_foundation_dropdown_DropdownPanel.__super__ = blok_ui_Component;
Object.assign(blok_foundation_dropdown_DropdownPanel.prototype, {
	__class__: blok_foundation_dropdown_DropdownPanel
});
class blok_foundation_dropdown_DropdownToggle extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		return this.get_child();
	}
	get_child() {
		return this.__backing_child.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_dropdown_DropdownToggle.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_dropdown_DropdownToggle.componentType,props,function(node) {
			return new blok_foundation_dropdown_DropdownToggle(node);
		},key);
	}
}
blok_foundation_dropdown_DropdownToggle.__name__ = "blok.foundation.dropdown.DropdownToggle";
blok_foundation_dropdown_DropdownToggle.__super__ = blok_ui_Component;
Object.assign(blok_foundation_dropdown_DropdownToggle.prototype, {
	__class__: blok_foundation_dropdown_DropdownToggle
});
class blok_foundation_layer_Layer extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		let tmp = props.onShow;
		this.__backing_onShow = blok_signal_Signal.ofValue(tmp != null ? tmp : null);
		this.__backing_onHide = blok_signal_Signal.ofValue(props.onHide);
		let tmp1 = props.hideOnClick;
		this.__backing_hideOnClick = blok_signal_Signal.ofValue(tmp1 != null ? tmp1 : true);
		let tmp2 = props.hideOnEscape;
		this.__backing_hideOnEscape = blok_signal_Signal.ofValue(tmp2 != null ? tmp2 : true);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		let tmp3 = props.className;
		this.__backing_className = blok_signal_Signal.ofValue(tmp3 != null ? tmp3 : null);
		let tmp4 = props.transitionSpeed;
		this.__backing_transitionSpeed = blok_signal_Signal.ofValue(tmp4 != null ? tmp4 : 150);
		let tmp5 = props.showAnimation;
		this.__backing_showAnimation = blok_signal_Signal.ofValue(tmp5 != null ? tmp5 : blok_foundation_layer_Layer_DefaultShowAnimation);
		let tmp6 = props.hideAnimation;
		this.__backing_hideAnimation = blok_signal_Signal.ofValue(tmp6 != null ? tmp6 : blok_foundation_layer_Layer_DefaultHideAnimation);
	}
	render() {
		let _gthis = this;
		return blok_foundation_layer_LayerContext.provide(function() {
			return new blok_foundation_layer_LayerContext({ });
		},function(layer) {
			let this1 = new blok_signal_SignalObject(_gthis.get_className());
			let this2 = new blok_signal_SignalObject("position:fixed;inset:0px;overflow-x:hidden;overflow-y:scroll;");
			let this3 = new blok_signal_SignalObject(function(e) {
				if(_gthis.get_hideOnClick()) {
					e.preventDefault();
					layer.hide();
				}
			});
			let body = blok_foundation_layer_LayerTarget.node({ child : _gthis.get_child()});
			let body1 = blok_html_Html.div({ className : this1, style : this2, onClick : this3},body);
			let transform = function(status) {
				switch(status._hx_index) {
				case 0:
					return _gthis.get_showAnimation();
				case 1:
					return _gthis.get_hideAnimation();
				}
			};
			let _gthis1 = layer.status;
			let animation = blok_foundation_animation_Animated.node({ keyframes : new blok_signal_ComputationObject(function() {
				return transform(_gthis1.get());
			},null), duration : _gthis.get_transitionSpeed(), onFinished : function(_) {
				switch(layer.status.peek()._hx_index) {
				case 0:
					if(_gthis.get_onShow() != null) {
						(_gthis.get_onShow())();
					}
					break;
				case 1:
					if(_gthis.get_onHide() != null) {
						(_gthis.get_onHide())();
					}
					break;
				}
			}, onDispose : function(_) {
				if(_gthis.get_onHide() != null) {
					(_gthis.get_onHide())();
				}
			}, child : body1});
			return blok_foundation_layer_LayerContainer.node({ hideOnEscape : _gthis.get_hideOnEscape(), child : animation});
		});
	}
	get_onShow() {
		return this.__backing_onShow.get();
	}
	get_onHide() {
		return this.__backing_onHide.get();
	}
	get_hideOnClick() {
		return this.__backing_hideOnClick.get();
	}
	get_hideOnEscape() {
		return this.__backing_hideOnEscape.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	get_className() {
		return this.__backing_className.get();
	}
	get_transitionSpeed() {
		return this.__backing_transitionSpeed.get();
	}
	get_showAnimation() {
		return this.__backing_showAnimation.get();
	}
	get_hideAnimation() {
		return this.__backing_hideAnimation.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_onShow.set(props.onShow);
			_gthis.__backing_onHide.set(props.onHide);
			_gthis.__backing_hideOnClick.set(props.hideOnClick);
			_gthis.__backing_hideOnEscape.set(props.hideOnEscape);
			_gthis.__backing_child.set(props.child);
			_gthis.__backing_className.set(props.className);
			_gthis.__backing_transitionSpeed.set(props.transitionSpeed);
			_gthis.__backing_showAnimation.set(props.showAnimation);
			_gthis.__backing_hideAnimation.set(props.hideAnimation);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_layer_Layer.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_layer_Layer.componentType,props,function(node) {
			return new blok_foundation_layer_Layer(node);
		},key);
	}
}
blok_foundation_layer_Layer.__name__ = "blok.foundation.layer.Layer";
blok_foundation_layer_Layer.__super__ = blok_ui_Component;
Object.assign(blok_foundation_layer_Layer.prototype, {
	__class__: blok_foundation_layer_Layer
});
class blok_foundation_layer_LayerTarget extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		return this.get_child();
	}
	get_child() {
		return this.__backing_child.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_layer_LayerTarget.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_layer_LayerTarget.componentType,props,function(node) {
			return new blok_foundation_layer_LayerTarget(node);
		},key);
	}
}
blok_foundation_layer_LayerTarget.__name__ = "blok.foundation.layer.LayerTarget";
blok_foundation_layer_LayerTarget.__super__ = blok_ui_Component;
Object.assign(blok_foundation_layer_LayerTarget.prototype, {
	__class__: blok_foundation_layer_LayerTarget
});
class blok_foundation_layer_LayerContainer extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_hideOnEscape = blok_signal_Signal.ofValue(props.hideOnEscape);
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		return this.get_child();
	}
	setup() {
		let document = window.document;
		let _gthis = this;
		let onEscape = function(e) {
			if(e.key == "Escape") {
				if(_gthis.get_hideOnEscape()) {
					e.preventDefault();
					blok_foundation_layer_LayerContext.from(_gthis).hide();
				}
			}
		};
		document.addEventListener("keydown",onEscape);
		let node = kit_MaybeTools.orThrow(this.findChildOfType(blok_foundation_layer_LayerTarget,true),"Expected a LayerTarget").getRealNode();
		blok_foundation_core_FocusContext.from(this).focus(node);
		this.addDisposable(new blok_core_DisposableCallback(function() {
			document.removeEventListener("keydown",onEscape);
			blok_foundation_core_FocusContext.from(_gthis).returnFocus();
		}));
	}
	get_hideOnEscape() {
		return this.__backing_hideOnEscape.get();
	}
	get_child() {
		return this.__backing_child.get();
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_hideOnEscape.set(props.hideOnEscape);
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_layer_LayerContainer.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_layer_LayerContainer.componentType,props,function(node) {
			return new blok_foundation_layer_LayerContainer(node);
		},key);
	}
}
blok_foundation_layer_LayerContainer.__name__ = "blok.foundation.layer.LayerContainer";
blok_foundation_layer_LayerContainer.__super__ = blok_ui_Component;
Object.assign(blok_foundation_layer_LayerContainer.prototype, {
	__class__: blok_foundation_layer_LayerContainer
});
var blok_foundation_layer_LayerContextStatus = $hxEnums["blok.foundation.layer.LayerContextStatus"] = { __ename__:true,__constructs__:null
	,Showing: {_hx_name:"Showing",_hx_index:0,__enum__:"blok.foundation.layer.LayerContextStatus",toString:$estr}
	,Hiding: {_hx_name:"Hiding",_hx_index:1,__enum__:"blok.foundation.layer.LayerContextStatus",toString:$estr}
};
blok_foundation_layer_LayerContextStatus.__constructs__ = [blok_foundation_layer_LayerContextStatus.Showing,blok_foundation_layer_LayerContextStatus.Hiding];
class blok_foundation_layer_LayerContext extends blok_data_Record {
	constructor(props) {
		blok_data_Record._hx_skip_constructor = true;
		super();
		blok_data_Record._hx_skip_constructor = false;
		this._hx_constructor(props);
	}
	_hx_constructor(props) {
		this.status = blok_signal_Signal.ofValue(blok_foundation_layer_LayerContextStatus.Showing);
		super._hx_constructor();
		if(props.status != null) {
			this.status = blok_signal_Signal.ofValue(props.status);
		}
	}
	hide() {
		this.status.set(blok_foundation_layer_LayerContextStatus.Hiding);
	}
	__getContextId() {
		return blok_foundation_layer_LayerContext.__contextId;
	}
	static provide(create,child,key) {
		return blok_context_Provider.node({ create : create, child : child});
	}
	static from(context) {
		return kit_MaybeTools.or(blok_foundation_layer_LayerContext.maybeFrom(context),new kit_SimpleLazyObject(function() {
			return new blok_foundation_layer_LayerContext({ });
		}));
	}
	static maybeFrom(context) {
		return kit_MaybeTools.flatMap(context.findAncestor(function(ancestor) {
			let _g = ((ancestor) instanceof blok_context_Provider) ? ancestor : null;
			if(_g == null) {
				return false;
			} else {
				let provider = _g;
				return provider.match(blok_foundation_layer_LayerContext.__contextId);
			}
		}),function(provider) {
			return provider.getContext();
		});
	}
}
blok_foundation_layer_LayerContext.__name__ = "blok.foundation.layer.LayerContext";
blok_foundation_layer_LayerContext.__interfaces__ = [blok_context_Context];
blok_foundation_layer_LayerContext.__super__ = blok_data_Record;
Object.assign(blok_foundation_layer_LayerContext.prototype, {
	__class__: blok_foundation_layer_LayerContext
});
class blok_foundation_layer_Popover extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		let tmp = props.gap;
		this.__backing_gap = blok_signal_Signal.ofValue(tmp != null ? tmp : 0);
		this.__backing_attachment = blok_signal_Signal.ofValue(props.attachment);
		let tmp1 = props.getTarget;
		this.__backing_getTarget = blok_signal_Signal.ofValue(tmp1 != null ? tmp1 : null);
	}
	render() {
		let target = blok_foundation_core_PortalContext.from(this).target;
		let _gthis = this;
		return blok_ui_Portal.node({ target : target, child : function() {
			let tmp = _gthis.get_getTarget();
			return blok_foundation_core_Positioned.node({ getTarget : tmp != null ? tmp : function() {
				return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
			}, gap : _gthis.get_gap(), attachment : _gthis.get_attachment(), child : _gthis.get_child()});
		}},null);
	}
	get_child() {
		return this.__backing_child.get();
	}
	get_gap() {
		return this.__backing_gap.get();
	}
	get_attachment() {
		return this.__backing_attachment.get();
	}
	get_getTarget() {
		return this.__backing_getTarget.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
			_gthis.__backing_gap.set(props.gap);
			_gthis.__backing_attachment.set(props.attachment);
			_gthis.__backing_getTarget.set(props.getTarget);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_foundation_layer_Popover.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_foundation_layer_Popover.componentType,props,function(node) {
			return new blok_foundation_layer_Popover(node);
		},key);
	}
}
blok_foundation_layer_Popover.__name__ = "blok.foundation.layer.Popover";
blok_foundation_layer_Popover.__super__ = blok_ui_Component;
Object.assign(blok_foundation_layer_Popover.prototype, {
	__class__: blok_foundation_layer_Popover
});
class blok_html_Html {
	static a(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_a,"a",props,children.slice(),props.key);
	}
	static button(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_button,"button",props,children.slice(),props.key);
	}
	static div(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_div,"div",props,children.slice(),props.key);
	}
	static li(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_li,"li",props,children.slice(),props.key);
	}
	static p(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_p,"p",props,children.slice(),props.key);
	}
	static ul(props,...children) {
		return new blok_ui_VRealNode(blok_html_Html.__componentType_ul,"ul",props,children.slice(),props.key);
	}
}
blok_html_Html.__name__ = "blok.html.Html";
function blok_html_client_Client_mount(el,child) {
	let root = blok_ui_RootComponent.node({ target : el, child : child, adaptor : new blok_html_client_ClientAdaptor()});
	let component = root.createComponent();
	component.mount(null,null);
	return component;
}
class blok_html_client_ClientAdaptor {
	constructor() {
		this.scheduler = new blok_html_client_Scheduler();
	}
	createNode(name,initialAttrs) {
		if(name.startsWith("svg:")) {
			let tmp = HxOverrides.substr(name,4,null);
			return window.document.createElementNS("http://www.w3.org/2000/svg",tmp);
		} else {
			return window.document.createElement(name);
		}
	}
	createTextNode(value) {
		return window.document.createTextNode(value);
	}
	createPlaceholderNode() {
		return this.createTextNode("");
	}
	updateTextNode(object,value) {
		object.textContent = value;
	}
	updateNodeAttribute(object,name,oldValue,value,isHydrating) {
		let el = object;
		let isSvg = el.namespaceURI == "http://www.w3.org/2000/svg";
		if(isHydrating == true) {
			name = this.getHtmlName(name);
			if(name.startsWith("on")) {
				let name1 = name.toLowerCase();
				if(value == null) {
					el[name1] = null;
				} else {
					el[name1] = value;
				}
			}
			return;
		}
		switch(name) {
		case "checked":case "selected":case "value":
			if(!isSvg) {
				el[name] = value;
			} else if(!isSvg && name in el) {
				el[name] = value;
			} else {
				name = this.getHtmlName(name);
				if(name.startsWith("on")) {
					let name1 = name.toLowerCase();
					if(value == null) {
						el[name1] = null;
					} else {
						el[name1] = value;
					}
				} else if(value == null || typeof(value) == "boolean" && value == false) {
					el.removeAttribute(name);
				} else if(typeof(value) == "boolean" && value == true) {
					el.setAttribute(name,name);
				} else {
					el.setAttribute(name,value);
				}
			}
			break;
		case "class":case "className":
			let _this = Std.string(oldValue != null ? oldValue : "").split(" ");
			let _g = [];
			let _g1 = 0;
			while(_g1 < _this.length) {
				let v = _this[_g1];
				++_g1;
				if(v != null && v != "") {
					_g.push(v);
				}
			}
			let tmp = value;
			let _this1 = Std.string(tmp != null ? tmp : "").split(" ");
			let _g2 = [];
			let _g3 = 0;
			while(_g3 < _this1.length) {
				let v = _this1[_g3];
				++_g3;
				if(v != null && v != "") {
					_g2.push(v);
				}
			}
			let _g4 = 0;
			while(_g4 < _g.length) {
				let name = _g[_g4];
				++_g4;
				if(!_g2.includes(name)) {
					el.classList.remove(name);
				} else {
					HxOverrides.remove(_g2,name);
				}
			}
			if(_g2.length > 0) {
				el.classList.add(..._g2);
			}
			break;
		case "dataset":
			if(!isSvg && name in el) {
				el[name] = value;
			} else {
				let map = value;
				let h = map.h;
				let _g_keys = Object.keys(h);
				let _g_length = _g_keys.length;
				let _g_current = 0;
				while(_g_current < _g_length) {
					let key = _g_keys[_g_current++];
					let _g_value = h[key];
					if(_g_value == null) {
						Reflect.deleteField(el.dataset,key);
					} else {
						el.dataset[key] = _g_value;
					}
				}
			}
			break;
		case "xmlns":
			if(!isSvg) {
				if(!isSvg && name in el) {
					el[name] = value;
				} else {
					name = this.getHtmlName(name);
					if(name.startsWith("on")) {
						let name1 = name.toLowerCase();
						if(value == null) {
							el[name1] = null;
						} else {
							el[name1] = value;
						}
					} else if(value == null || typeof(value) == "boolean" && value == false) {
						el.removeAttribute(name);
					} else if(typeof(value) == "boolean" && value == true) {
						el.setAttribute(name,name);
					} else {
						el.setAttribute(name,value);
					}
				}
			}
			break;
		default:
			if(!isSvg && name in el) {
				el[name] = value;
			} else {
				name = this.getHtmlName(name);
				if(name.startsWith("on")) {
					let name1 = name.toLowerCase();
					if(value == null) {
						el[name1] = null;
					} else {
						el[name1] = value;
					}
				} else if(value == null || typeof(value) == "boolean" && value == false) {
					el.removeAttribute(name);
				} else if(typeof(value) == "boolean" && value == true) {
					el.setAttribute(name,name);
				} else {
					el.setAttribute(name,value);
				}
			}
		}
	}
	getHtmlName(name) {
		if(name.startsWith("aria")) {
			return "aria-" + HxOverrides.substr(name,4,null).toLowerCase();
		}
		return name;
	}
	insertNode(object,slot,findParent) {
		let el = object;
		if(slot != null && slot.previous != null) {
			let relative = slot.previous.getRealNode();
			relative.after(el);
		} else {
			let parent = findParent();
			if(parent == null) {
				throw new blok_core_BlokException("Failed assertion: parent != null");
			}
			parent.prepend(el);
		}
	}
	moveNode(object,from,to,findParent) {
		let el = object;
		if(to == null) {
			if(from != null) {
				this.removeNode(object,from);
			}
			return;
		}
		if(from != null && !from.indexChanged(to)) {
			return;
		}
		if(to.previous == null) {
			let parent = findParent();
			if(parent == null) {
				throw new blok_core_BlokException("Failed assertion: parent != null");
			}
			parent.prepend(el);
			return;
		}
		let relative = to.previous.getRealNode();
		if(relative == null) {
			throw new blok_core_BlokException("Failed assertion: relative != null");
		}
		relative.after(el);
	}
	removeNode(object,slot) {
		object.remove();
	}
	schedule(effect) {
		this.scheduler.schedule(effect);
	}
}
blok_html_client_ClientAdaptor.__name__ = "blok.html.client.ClientAdaptor";
blok_html_client_ClientAdaptor.__interfaces__ = [blok_adaptor_Adaptor];
Object.assign(blok_html_client_ClientAdaptor.prototype, {
	__class__: blok_html_client_ClientAdaptor
});
class blok_html_client_Scheduler {
	constructor() {
		this.onUpdate = null;
	}
	schedule(item) {
		if(this.onUpdate == null) {
			this.onUpdate = [];
			this.onUpdate.push(item);
			this.later($bind(this,this.doUpdate));
		} else {
			this.onUpdate.push(item);
		}
	}
	later(exec) {
		if(blok_html_client_Scheduler.hasRaf) {
			window.requestAnimationFrame(function(_) {
				exec();
			});
		} else {
			haxe_Timer.delay(function() {
				exec();
			},10);
		}
	}
	doUpdate() {
		if(this.onUpdate == null) {
			return;
		}
		let currentUpdates = this.onUpdate.slice();
		this.onUpdate = null;
		let _g = 0;
		while(_g < currentUpdates.length) {
			let u = currentUpdates[_g];
			++_g;
			u();
		}
	}
}
blok_html_client_Scheduler.__name__ = "blok.html.client.Scheduler";
Object.assign(blok_html_client_Scheduler.prototype, {
	__class__: blok_html_client_Scheduler
});
class blok_signal_Node {
}
blok_signal_Node.__name__ = "blok.signal.Node";
blok_signal_Node.__isInterface__ = true;
blok_signal_Node.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_signal_Node.prototype, {
	__class__: blok_signal_Node
});
class blok_signal_ConsumerNode {
}
blok_signal_ConsumerNode.__name__ = "blok.signal.ConsumerNode";
blok_signal_ConsumerNode.__isInterface__ = true;
blok_signal_ConsumerNode.__interfaces__ = [blok_signal_Node];
Object.assign(blok_signal_ConsumerNode.prototype, {
	__class__: blok_signal_ConsumerNode
});
class blok_signal_Observer {
	constructor(handler) {
		if(blok_signal_Observer._hx_skip_constructor) {
			return;
		}
		this._hx_constructor(handler);
	}
	_hx_constructor(handler) {
		this.status = 0;
		this.version = 0;
		this.disposables = new blok_core_DisposableCollection();
		this.producers = new haxe_ds_IntMap();
		this.id = kit_UniqueId.uid++;
		this.handler = handler;
		let _g = blok_signal_Graph_currentOwner;
		switch(_g._hx_index) {
		case 0:
			_g.value.addDisposable(this);
			break;
		case 1:
			console.log("blok/signal/Observer.hx:44:","Creating an Observer without an owner means it may never get disposed");
			break;
		}
		this.validate();
	}
	isInactive() {
		return this.status == 1;
	}
	invalidate() {
		switch(this.status) {
		case 0:case 2:
			this.status = 3;
			blok_signal_Graph_enqueueConsumer(this);
			break;
		case 1:case 3:
			break;
		case 4:
			throw new blok_core_BlokException("Cycle detected");
		}
	}
	validate() {
		switch(this.status) {
		case 1:case 2:
			return;
		case 3:
			if(!this.pollProducers()) {
				this.status = 2;
				return;
			}
			break;
		case 4:
			throw new blok_core_BlokException("Cycle detected");
		default:
		}
		let prevConsumer = blok_signal_Graph_setCurrentConsumer(kit_Maybe.Some(this));
		let prevOwner = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(this.disposables));
		let err = null;
		this.status = 4;
		this.unbindAll();
		try {
			this.handler();
		} catch( _g ) {
			err = haxe_Exception.caught(_g);
		}
		this.status = 2;
		this.version++;
		blok_signal_Graph_setCurrentConsumer(prevConsumer);
		blok_signal_Graph_setCurrentOwner(prevOwner);
		if(err != null) {
			throw haxe_Exception.thrown(err);
		}
	}
	getVersion() {
		return this.version;
	}
	pollProducers() {
		let link = this.producers.iterator();
		while(link.hasNext()) {
			let link1 = link.next();
			if(link1.lastSeenVersion < link1.node.getVersion()) {
				return true;
			}
		}
		return false;
	}
	bindProducer(node) {
		let this1 = this.producers;
		let key = node.id;
		let value = { lastSeenVersion : node.getVersion(), node : node};
		this1.h[key] = value;
	}
	unbindProducer(node) {
		this.producers.remove(node.id);
	}
	unbindAll() {
		let producer = this.producers.iterator();
		while(producer.hasNext()) {
			let producer1 = producer.next();
			producer1.node.unbindConsumer(this);
		}
		this.producers.h = { };
	}
	dispose() {
		if(this.isInactive()) {
			return;
		}
		this.disposables.dispose();
		this.status = 1;
		this.unbindAll();
	}
}
blok_signal_Observer.__name__ = "blok.signal.Observer";
blok_signal_Observer.__interfaces__ = [blok_signal_ConsumerNode];
Object.assign(blok_signal_Observer.prototype, {
	__class__: blok_signal_Observer
});
class blok_signal_ProducerNode {
}
blok_signal_ProducerNode.__name__ = "blok.signal.ProducerNode";
blok_signal_ProducerNode.__isInterface__ = true;
blok_signal_ProducerNode.__interfaces__ = [blok_signal_Node];
Object.assign(blok_signal_ProducerNode.prototype, {
	__class__: blok_signal_ProducerNode
});
class blok_signal_ComputationObject extends blok_signal_Observer {
	constructor(computation,equals) {
		blok_signal_Observer._hx_skip_constructor = true;
		super();
		blok_signal_Observer._hx_skip_constructor = false;
		this._hx_constructor(computation,equals);
	}
	_hx_constructor(computation,equals) {
		this.value = kit_Maybe.None;
		this.consumers = new haxe_ds_List();
		this.equals = equals != null ? equals : function(a,b) {
			return a == b;
		};
		let _gthis = this;
		super._hx_constructor(function() {
			let newValue = computation();
			let _g = _gthis.value;
			switch(_g._hx_index) {
			case 0:
				if(!_gthis.equals(_g.value,newValue)) {
					_gthis.version++;
					_gthis.value = kit_Maybe.Some(newValue);
					_gthis.notify();
				}
				break;
			case 1:
				_gthis.value = kit_Maybe.Some(newValue);
				break;
			}
		});
	}
	get() {
		if(this.isInactive()) {
			let _g = this.value;
			switch(_g._hx_index) {
			case 0:
				return _g.value;
			case 1:
				throw new blok_core_BlokException("Value was not initialized");
			}
		}
		let _g = blok_signal_Graph_currentConsumer;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.value;
			if(_g1 == this) {
				throw new blok_core_BlokException("Cannot observe self");
			} else {
				_g1.bindProducer(this);
				this.bindConsumer(_g1);
			}
			break;
		case 1:
			break;
		}
		let _g2 = this.value;
		switch(_g2._hx_index) {
		case 0:
			return _g2.value;
		case 1:
			throw new blok_core_BlokException("Value was not initialized");
		}
	}
	peek() {
		let _g = this.value;
		switch(_g._hx_index) {
		case 0:
			return _g.value;
		case 1:
			throw new blok_core_BlokException("Value was not initialized");
		}
	}
	notify() {
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			if(val.isInactive()) {
				this.consumers.remove(val);
			} else {
				val.invalidate();
			}
		}
	}
	bindConsumer(consumer) {
		if(Lambda.exists(this.consumers,function(node) {
			return node.id == consumer.id;
		})) {
			return;
		}
		this.consumers.push(consumer);
	}
	unbindConsumer(consumer) {
		this.consumers.remove(consumer);
	}
	dispose() {
		super.dispose();
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			this.unbindConsumer(val);
			val.unbindProducer(this);
		}
	}
}
blok_signal_ComputationObject.__name__ = "blok.signal.ComputationObject";
blok_signal_ComputationObject.__interfaces__ = [blok_signal_ProducerNode];
blok_signal_ComputationObject.__super__ = blok_signal_Observer;
Object.assign(blok_signal_ComputationObject.prototype, {
	__class__: blok_signal_ComputationObject
});
var kit_Maybe = $hxEnums["kit.Maybe"] = { __ename__:true,__constructs__:null
	,Some: ($_=function(value) { return {_hx_index:0,value:value,__enum__:"kit.Maybe",toString:$estr}; },$_._hx_name="Some",$_.__params__ = ["value"],$_)
	,None: {_hx_name:"None",_hx_index:1,__enum__:"kit.Maybe",toString:$estr}
};
kit_Maybe.__constructs__ = [kit_Maybe.Some,kit_Maybe.None];
class haxe_ds_List {
	constructor() {
		this.length = 0;
	}
	add(item) {
		let x = new haxe_ds__$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	push(item) {
		let x = new haxe_ds__$List_ListNode(item,this.h);
		this.h = x;
		if(this.q == null) {
			this.q = x;
		}
		this.length++;
	}
	remove(v) {
		let prev = null;
		let l = this.h;
		while(l != null) {
			if(l.item == v) {
				if(prev == null) {
					this.h = l.next;
				} else {
					prev.next = l.next;
				}
				if(this.q == l) {
					this.q = prev;
				}
				this.length--;
				return true;
			}
			prev = l;
			l = l.next;
		}
		return false;
	}
	iterator() {
		return new haxe_ds__$List_ListIterator(this.h);
	}
}
haxe_ds_List.__name__ = "haxe.ds.List";
Object.assign(haxe_ds_List.prototype, {
	__class__: haxe_ds_List
});
function blok_signal_Graph_withOwner(owner,cb) {
	let prev = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(owner));
	try {
		cb();
	} catch( _g ) {
		let _g1 = haxe_Exception.caught(_g);
		blok_signal_Graph_setCurrentOwner(prev);
		throw haxe_Exception.thrown(_g1);
	}
	blok_signal_Graph_setCurrentOwner(prev);
}
function blok_signal_Graph_withOwnedValue(owner,cb) {
	let prev = blok_signal_Graph_setCurrentOwner(kit_Maybe.Some(owner));
	let value;
	try {
		value = cb();
	} catch( _g ) {
		let _g1 = haxe_Exception.caught(_g);
		blok_signal_Graph_setCurrentOwner(prev);
		throw haxe_Exception.thrown(_g1);
	}
	blok_signal_Graph_setCurrentOwner(prev);
	return value;
}
function blok_signal_Graph_setCurrentOwner(owner) {
	let prev = blok_signal_Graph_currentOwner;
	blok_signal_Graph_currentOwner = owner;
	return prev;
}
function blok_signal_Graph_setCurrentConsumer(consumer) {
	let prev = blok_signal_Graph_currentConsumer;
	blok_signal_Graph_currentConsumer = consumer;
	return prev;
}
function blok_signal_Graph_enqueueConsumer(node) {
	if(!Lambda.has(blok_signal_Graph_pending,node)) {
		blok_signal_Graph_pending.add(node);
	}
	blok_signal_Graph_validateConsumers();
}
function blok_signal_Graph_validateConsumers() {
	if(blok_signal_Graph_depth > 0) {
		return;
	}
	let _g_head = blok_signal_Graph_pending.h;
	while(_g_head != null) {
		let val = _g_head.item;
		_g_head = _g_head.next;
		blok_signal_Graph_pending.remove(val);
		val.validate();
	}
}
function blok_signal_Graph_batch(compute) {
	blok_signal_Graph_depth++;
	compute();
	blok_signal_Graph_depth--;
	blok_signal_Graph_validateConsumers();
}
function blok_signal_Graph_untrackValue(compute) {
	let prev = blok_signal_Graph_setCurrentConsumer(kit_Maybe.None);
	let value = compute();
	blok_signal_Graph_setCurrentConsumer(prev);
	return value;
}
class blok_signal_Signal {
	static ofValue(value) {
		return new blok_signal_SignalObject(value);
	}
}
class blok_signal_SignalObject {
	constructor(value,equals) {
		this.consumers = new haxe_ds_List();
		this.version = 0;
		this.isDisposed = false;
		this.id = kit_UniqueId.uid++;
		this.value = value;
		this.equals = equals != null ? equals : function(a,b) {
			return a == b;
		};
		let _g = blok_signal_Graph_currentOwner;
		switch(_g._hx_index) {
		case 0:
			_g.value.addDisposable(this);
			break;
		case 1:
			break;
		}
	}
	getVersion() {
		return this.version;
	}
	set(newValue) {
		if(this.isDisposed) {
			console.log("blok/signal/Signal.hx:55:","Attempted to set a disposed signal");
			return this.value;
		}
		if(this.equals(this.value,newValue)) {
			return this.value;
		}
		this.value = newValue;
		this.version++;
		this.notify();
		return this.value;
	}
	get() {
		if(this.isDisposed) {
			return this.value;
		}
		let _g = blok_signal_Graph_currentConsumer;
		switch(_g._hx_index) {
		case 0:
			let _g1 = _g.value;
			_g1.bindProducer(this);
			this.bindConsumer(_g1);
			break;
		case 1:
			break;
		}
		return this.value;
	}
	update(updater) {
		return this.set(updater(this.peek()));
	}
	peek() {
		return this.value;
	}
	notify() {
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			if(val.isInactive()) {
				this.consumers.remove(val);
			} else {
				val.invalidate();
			}
		}
	}
	bindConsumer(consumer) {
		if(Lambda.exists(this.consumers,function(node) {
			return node.id == consumer.id;
		})) {
			return;
		}
		this.consumers.push(consumer);
	}
	unbindConsumer(consumer) {
		this.consumers.remove(consumer);
	}
	isInactive() {
		return this.isDisposed;
	}
	dispose() {
		if(this.isDisposed) {
			return;
		}
		this.isDisposed = true;
		let _g_head = this.consumers.h;
		while(_g_head != null) {
			let val = _g_head.item;
			_g_head = _g_head.next;
			this.unbindConsumer(val);
			val.unbindProducer(this);
		}
	}
}
blok_signal_SignalObject.__name__ = "blok.signal.SignalObject";
blok_signal_SignalObject.__interfaces__ = [blok_signal_ProducerNode];
Object.assign(blok_signal_SignalObject.prototype, {
	__class__: blok_signal_SignalObject
});
var blok_ui_ComponentStatus = $hxEnums["blok.ui.ComponentStatus"] = { __ename__:true,__constructs__:null
	,Pending: {_hx_name:"Pending",_hx_index:0,__enum__:"blok.ui.ComponentStatus",toString:$estr}
	,Valid: {_hx_name:"Valid",_hx_index:1,__enum__:"blok.ui.ComponentStatus",toString:$estr}
	,Invalid: {_hx_name:"Invalid",_hx_index:2,__enum__:"blok.ui.ComponentStatus",toString:$estr}
	,Rendering: {_hx_name:"Rendering",_hx_index:3,__enum__:"blok.ui.ComponentStatus",toString:$estr}
	,Disposing: {_hx_name:"Disposing",_hx_index:4,__enum__:"blok.ui.ComponentStatus",toString:$estr}
	,Disposed: {_hx_name:"Disposed",_hx_index:5,__enum__:"blok.ui.ComponentStatus",toString:$estr}
};
blok_ui_ComponentStatus.__constructs__ = [blok_ui_ComponentStatus.Pending,blok_ui_ComponentStatus.Valid,blok_ui_ComponentStatus.Invalid,blok_ui_ComponentStatus.Rendering,blok_ui_ComponentStatus.Disposing,blok_ui_ComponentStatus.Disposed];
class blok_ui_Fragment extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.marker = null;
		this.children = [];
		super._hx_constructor();
		this.__node = node;
	}
	render() {
		let props = this.__node.getProps();
		let _this = props.children;
		let _g = [];
		let _g1 = 0;
		while(_g1 < _this.length) {
			let v = _this[_g1];
			++_g1;
			if(v != null) {
				_g.push(v);
			}
		}
		return _g;
	}
	createSlot(localIndex,previous) {
		let tmp = this.__slot;
		let tmp1 = tmp != null ? tmp.index : null;
		return new blok_ui_FragmentSlot(tmp1 != null ? tmp1 : 0,localIndex + 1,previous);
	}
	__initialize() {
		this.marker = blok_ui_Placeholder.node().createComponent();
		let tmp = this.__slot;
		this.marker.mount(this,this.createSlot(-1,tmp != null ? tmp.previous : null));
		let previous = this.marker;
		let nodes = this.render();
		let newChildren = [];
		let _g_current = 0;
		while(_g_current < nodes.length) {
			let _g_value = nodes[_g_current];
			let _g_key = _g_current++;
			let child = _g_value.createComponent();
			child.mount(this,this.createSlot(_g_key,previous));
			newChildren.push(child);
			previous = child;
		}
		this.children = newChildren;
	}
	__update() {
		this.children = blok_diffing_Differ_diffChildren(this,this.children,this.render());
	}
	__validate() {
		this.__update();
	}
	__dispose() {
		let tmp = this.marker;
		if(tmp != null) {
			tmp.dispose();
		}
		this.marker = null;
	}
	__updateSlot(oldSlot,newSlot) {
		if(this.marker != null && newSlot != null) {
			this.marker.updateSlot(this.createSlot(-1,newSlot.previous));
			let previous = this.marker;
			let _this = this.children;
			let _g_current = 0;
			while(_g_current < _this.length) {
				let _g_value = _this[_g_current];
				let _g_key = _g_current++;
				_g_value.updateSlot(this.createSlot(_g_key,previous));
				previous = _g_value;
			}
		}
	}
	getRealNode() {
		if(this.children.length == 0) {
			let tmp = this.marker;
			if(tmp != null) {
				return tmp.getRealNode();
			} else {
				return null;
			}
		}
		return this.children[this.children.length - 1].getRealNode();
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_Fragment.componentType;
	}
	visitChildren(visitor) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let child = _g1[_g];
			++_g;
			if(!visitor(child)) {
				return;
			}
		}
	}
	static node(...children) {
		return new blok_ui_VComponent(blok_ui_Fragment.componentType,{ children : children},function(node) {
			return new blok_ui_Fragment(node);
		});
	}
}
blok_ui_Fragment.__name__ = "blok.ui.Fragment";
blok_ui_Fragment.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_Fragment.prototype, {
	__class__: blok_ui_Fragment
});
class blok_ui_Slot {
	constructor(index,previous) {
		this.index = index;
		this.previous = previous;
	}
	indexChanged(other) {
		return this.index != other.index;
	}
}
blok_ui_Slot.__name__ = "blok.ui.Slot";
Object.assign(blok_ui_Slot.prototype, {
	__class__: blok_ui_Slot
});
class blok_ui_FragmentSlot extends blok_ui_Slot {
	constructor(index,localIndex,previous) {
		super(index,previous);
		this.localIndex = localIndex;
	}
	indexChanged(other) {
		if(other.index != this.index) {
			return true;
		}
		if(((other) instanceof blok_ui_FragmentSlot)) {
			let otherFragment = other;
			return this.localIndex != otherFragment.localIndex;
		}
		return false;
	}
}
blok_ui_FragmentSlot.__name__ = "blok.ui.FragmentSlot";
blok_ui_FragmentSlot.__super__ = blok_ui_Slot;
Object.assign(blok_ui_FragmentSlot.prototype, {
	__class__: blok_ui_FragmentSlot
});
class blok_ui_Placeholder extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.realNode = null;
		super._hx_constructor();
		this.__node = node;
	}
	__initialize() {
		let adaptor = this.getAdaptor();
		this.realNode = adaptor.createPlaceholderNode();
		let _gthis = this;
		adaptor.insertNode(this.realNode,this.__slot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	__update() {
	}
	__validate() {
	}
	__dispose() {
		this.getAdaptor().removeNode(this.realNode,this.__slot);
	}
	__updateSlot(oldSlot,newSlot) {
		let _gthis = this;
		this.getAdaptor().moveNode(this.getRealNode(),oldSlot,newSlot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	getRealNode() {
		if(this.realNode == null) {
			throw new blok_core_BlokComponentException("Failed assertion: realNode != null",this);
		}
		return this.realNode;
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_Placeholder.componentType;
	}
	visitChildren(visitor) {
	}
	static node(key) {
		return new blok_ui_VComponent(blok_ui_Placeholder.componentType,{ },function(node) {
			return new blok_ui_Placeholder(node);
		},key);
	}
}
blok_ui_Placeholder.__name__ = "blok.ui.Placeholder";
blok_ui_Placeholder.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_Placeholder.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_Placeholder.prototype, {
	__class__: blok_ui_Placeholder
});
class blok_ui_Portal extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.root = null;
		this.marker = null;
		this.child = null;
		this.target = null;
		super._hx_constructor();
		this.__node = node;
		this.updateProps();
	}
	setupPortalRoot() {
		this.root = blok_ui_RootComponent.node({ target : this.target, child : this.child, adaptor : this.getAdaptor()}).createComponent();
	}
	updateProps() {
		let props = this.__node.getProps();
		this.target = props.target;
		this.child = props.child;
	}
	__initialize() {
		this.marker = blok_ui_Placeholder.node().createComponent();
		this.marker.mount(this,this.__slot);
		this.setupPortalRoot();
		this.root.mount(this,null);
	}
	__update() {
		this.updateProps();
		this.root.update(blok_ui_RootComponent.node({ target : this.target, child : this.child, adaptor : this.getAdaptor()}));
	}
	__validate() {
		this.root.validate();
	}
	__dispose() {
		let tmp = this.root;
		if(tmp != null) {
			tmp.dispose();
		}
		this.root = null;
		let tmp1 = this.marker;
		if(tmp1 != null) {
			tmp1.dispose();
		}
		this.marker = null;
	}
	__updateSlot(oldSlot,newSlot) {
		let tmp = this.marker;
		if(tmp != null) {
			tmp.updateSlot(newSlot);
		}
	}
	getRealNode() {
		if(this.marker == null) {
			throw new blok_core_BlokComponentException("Failed assertion: marker != null",this);
		}
		return this.marker.getRealNode();
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_Portal.componentType;
	}
	visitChildren(visitor) {
		let tmp = this.root;
		if(tmp != null) {
			tmp.visitChildren(visitor);
		}
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_ui_Portal.componentType,props,function(node) {
			return new blok_ui_Portal(node);
		},key);
	}
}
blok_ui_Portal.__name__ = "blok.ui.Portal";
blok_ui_Portal.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_Portal.prototype, {
	__class__: blok_ui_Portal
});
class blok_ui_RealNodeComponent extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.children = [];
		this.realNode = null;
		this.hydrating = false;
		this.updaters = new haxe_ds_StringMap();
		super._hx_constructor();
		this.tag = node.tag;
		this.type = node.type;
		this.__node = node;
	}
	render() {
		let vn = this.__node;
		let tmp = vn.children;
		if(tmp != null) {
			return tmp;
		} else {
			return [];
		}
	}
	observeAttributes() {
		let _gthis = this;
		let applyAttribute = function(name,oldValue,value) {
			_gthis.getAdaptor().updateNodeAttribute(_gthis.getRealNode(),name,oldValue,value,_gthis.hydrating);
		};
		let props = this.__node.getProps();
		let fields = Reflect.fields(props);
		let h = this.updaters.h;
		let name_keys = Object.keys(h);
		let name_length = name_keys.length;
		let name_current = 0;
		while(name_current < name_length) {
			let name = name_keys[name_current++];
			if(!fields.includes(name)) {
				let tmp = this.updaters.h[name];
				if(tmp != null) {
					tmp.dispose();
				}
				let _this = this.updaters;
				if(Object.prototype.hasOwnProperty.call(_this.h,name)) {
					delete(_this.h[name]);
				}
			}
		}
		blok_signal_Graph_withOwner(this,function() {
			let _g = 0;
			while(_g < fields.length) {
				let name = fields[_g];
				++_g;
				let signal = Reflect.field(props,name);
				let updater = _gthis.updaters.h[name];
				if(updater == null) {
					updater = new blok_ui_NativePropertyUpdater(name,signal,applyAttribute);
					_gthis.updaters.h[name] = updater;
				} else {
					updater.update(signal);
				}
			}
		});
	}
	__initialize() {
		this.realNode = this.createRealNode();
		this.observeAttributes();
		let nodes = this.render();
		let previous = null;
		let _g = [];
		let _g_current = 0;
		while(_g_current < nodes.length) {
			let _g_value = nodes[_g_current];
			let _g_key = _g_current++;
			let child = _g_value.createComponent();
			child.mount(this,this.createSlot(_g_key,previous));
			previous = child;
			_g.push(child);
		}
		this.children = _g;
		let _gthis = this;
		this.getAdaptor().insertNode(this.realNode,this.__slot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	__update() {
		this.observeAttributes();
		this.children = blok_diffing_Differ_diffChildren(this,this.children,this.render());
	}
	__validate() {
		this.children = blok_diffing_Differ_diffChildren(this,this.children,this.render());
	}
	__dispose() {
		let h = this.updaters.h;
		let _g_keys = Object.keys(h);
		let _g_length = _g_keys.length;
		let _g_current = 0;
		while(_g_current < _g_length) {
			let key = _g_keys[_g_current++];
			let _g_value = h[key];
			_g_value.dispose();
		}
		this.updaters.h = Object.create(null);
		this.getAdaptor().removeNode(this.getRealNode(),this.__slot);
	}
	__updateSlot(oldSlot,newSlot) {
		let _gthis = this;
		this.getAdaptor().moveNode(this.getRealNode(),oldSlot,newSlot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	createRealNode() {
		return this.getAdaptor().createNode(this.tag,{ });
	}
	getRealNode() {
		if(this.realNode == null) {
			throw new blok_core_BlokComponentException("Failed assertion: realNode != null",this);
		}
		return this.realNode;
	}
	canBeUpdatedByNode(node) {
		return this.type == node.type;
	}
	visitChildren(visitor) {
		let _g = 0;
		let _g1 = this.children;
		while(_g < _g1.length) {
			let child = _g1[_g];
			++_g;
			if(!visitor(child)) {
				return;
			}
		}
	}
}
blok_ui_RealNodeComponent.__name__ = "blok.ui.RealNodeComponent";
blok_ui_RealNodeComponent.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_RealNodeComponent.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_RealNodeComponent.prototype, {
	__class__: blok_ui_RealNodeComponent
});
class blok_ui_NativePropertyUpdater {
	constructor(name,propSignal,setRealAttr) {
		this.oldValue = null;
		this.changeSignal = new blok_signal_SignalObject(propSignal);
		let _gthis = this;
		this.observer = new blok_signal_Observer(function() {
			let value = _gthis.changeSignal.get().get();
			if(value == _gthis.oldValue) {
				return;
			}
			setRealAttr(name,_gthis.oldValue,value);
			_gthis.oldValue = value;
		});
	}
	update(newSignal) {
		this.changeSignal.set(newSignal);
	}
	dispose() {
		this.changeSignal.dispose();
		this.observer.dispose();
	}
}
blok_ui_NativePropertyUpdater.__name__ = "blok.ui.NativePropertyUpdater";
blok_ui_NativePropertyUpdater.__interfaces__ = [blok_core_Disposable];
Object.assign(blok_ui_NativePropertyUpdater.prototype, {
	__class__: blok_ui_NativePropertyUpdater
});
class blok_ui_RootComponent extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.component = null;
		super._hx_constructor();
		this.__node = node;
		let __target = node.getProps();
		let target;
		let child;
		let adaptor;
		target = __target.target;
		child = __target.child;
		adaptor = __target.adaptor;
		this.target = target;
		this.child = child;
		this.__adaptor = adaptor;
	}
	render() {
		let _gthis = this;
		return blok_signal_Graph_withOwnedValue(this,function() {
			return blok_signal_Graph_untrackValue(_gthis.child);
		});
	}
	__initialize() {
		this.component = this.render().createComponent();
		this.component.mount(this,this.createSlot(0,null));
	}
	__update() {
	}
	__validate() {
	}
	__dispose() {
	}
	__updateSlot(oldSlot,newSlot) {
		this.component.updateSlot(newSlot);
	}
	getRealNode() {
		return this.target;
	}
	canBeUpdatedByNode(node) {
		return false;
	}
	visitChildren(visitor) {
		if(this.component != null) {
			visitor(this.component);
		}
	}
	static node(props) {
		return new blok_ui_VComponent(blok_ui_RootComponent.componentType,props,function(node) {
			return new blok_ui_RootComponent(node);
		});
	}
}
blok_ui_RootComponent.__name__ = "blok.ui.RootComponent";
blok_ui_RootComponent.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_RootComponent.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_RootComponent.prototype, {
	__class__: blok_ui_RootComponent
});
class blok_ui_Scope extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		return (this.get_child())(this);
	}
	get_child() {
		return this.__backing_child.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_Scope.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(blok_ui_Scope.componentType,props,function(node) {
			return new blok_ui_Scope(node);
		},key);
	}
}
blok_ui_Scope.__name__ = "blok.ui.Scope";
blok_ui_Scope.__super__ = blok_ui_Component;
Object.assign(blok_ui_Scope.prototype, {
	__class__: blok_ui_Scope
});
class blok_ui_Text {
	static ofString(value) {
		return blok_ui_TextComponent.node(value);
	}
	static ofSignal(signal) {
		return blok_ui_Scope.node({ child : function(_) {
			return blok_ui_Text.node(signal.get());
		}});
	}
	static node(value) {
		return blok_ui_Text._new(value);
	}
	static _new(value,key) {
		return blok_ui_TextComponent.node(value,key);
	}
}
class blok_ui_TextComponent extends blok_ui_ComponentBase {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.realNode = null;
		super._hx_constructor();
		this.__node = node;
	}
	__initialize() {
		let adaptor = this.getAdaptor();
		let props = this.__node.getProps();
		this.realNode = adaptor.createTextNode(props.value);
		let _gthis = this;
		adaptor.insertNode(this.realNode,this.__slot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	__update() {
		let adaptor = this.getAdaptor();
		let props = this.__node.getProps();
		adaptor.updateTextNode(this.realNode,props.value);
	}
	__validate() {
		this.__update();
	}
	__dispose() {
		this.getAdaptor().removeNode(this.realNode,this.__slot);
	}
	__updateSlot(oldSlot,newSlot) {
		let _gthis = this;
		this.getAdaptor().moveNode(this.realNode,oldSlot,newSlot,function() {
			return blok_adaptor_RealNodeHostTools_findNearestRealNode(_gthis);
		});
	}
	getRealNode() {
		if(this.realNode == null) {
			throw new blok_core_BlokComponentException("Failed assertion: realNode != null",this);
		}
		return this.realNode;
	}
	canBeUpdatedByNode(node) {
		return node.type == blok_ui_TextComponent.componentType;
	}
	visitChildren(visitor) {
	}
	static node(value,key) {
		return new blok_ui_VComponent(blok_ui_TextComponent.componentType,{ value : value},function(node) {
			return new blok_ui_TextComponent(node);
		},key);
	}
}
blok_ui_TextComponent.__name__ = "blok.ui.TextComponent";
blok_ui_TextComponent.__interfaces__ = [blok_adaptor_RealNodeHost];
blok_ui_TextComponent.__super__ = blok_ui_ComponentBase;
Object.assign(blok_ui_TextComponent.prototype, {
	__class__: blok_ui_TextComponent
});
class blok_ui_VNode {
}
blok_ui_VNode.__name__ = "blok.ui.VNode";
blok_ui_VNode.__isInterface__ = true;
Object.assign(blok_ui_VNode.prototype, {
	__class__: blok_ui_VNode
});
class blok_ui_VComponent {
	constructor(type,props,factory,key) {
		this.type = type;
		this.key = key;
		this.props = props;
		this.factory = factory;
	}
	getProps() {
		return this.props;
	}
	createComponent() {
		return this.factory(this);
	}
}
blok_ui_VComponent.__name__ = "blok.ui.VComponent";
blok_ui_VComponent.__interfaces__ = [blok_ui_VNode];
Object.assign(blok_ui_VComponent.prototype, {
	__class__: blok_ui_VComponent
});
class blok_ui_VRealNode {
	constructor(type,tag,props,children,key) {
		this.type = type;
		this.tag = tag;
		this.props = props;
		this.children = children;
		this.key = key;
	}
	getProps() {
		return this.props;
	}
	createComponent() {
		return new blok_ui_RealNodeComponent(this);
	}
}
blok_ui_VRealNode.__name__ = "blok.ui.VRealNode";
blok_ui_VRealNode.__interfaces__ = [blok_ui_VNode];
Object.assign(blok_ui_VRealNode.prototype, {
	__class__: blok_ui_VRealNode
});
class breeze_ClassName {
	static ofString(s) {
		if(s == null) {
			return null;
		} else {
			return s;
		}
	}
	static ofArray(parts) {
		let f = breeze_ClassName.ofString;
		let result = new Array(parts.length);
		let _g = 0;
		let _g1 = parts.length;
		while(_g < _g1) {
			let i = _g++;
			result[i] = f(parts[i]);
		}
		let _g2 = [];
		let _g3 = 0;
		while(_g3 < result.length) {
			let v = result[_g3];
			++_g3;
			if(v != null && v != "") {
				_g2.push(v);
			}
		}
		let name = _g2.join(" ");
		return name;
	}
	static with(this1,other) {
		let _g = other;
		return this1 == null ? _g : _g == null ? this1 : "" + this1 + " " + _g;
	}
}
class ex_AnimatedExample extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		this.__node.getProps();
	}
	render() {
		return blok_foundation_animation_AnimatedModifiers_animateForever(blok_html_Html.div({ className : new blok_signal_SignalObject(breeze_ClassName.ofArray(["bg-red-500","height-30px","width-30px"].slice()))}),"auto",function(_) {
			return [{ transform : "rotate(0)"},{ transform : "rotate(360deg)"}];
		},{ duration : 1000});
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			_gthis.__node.getProps();
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_AnimatedExample.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_AnimatedExample.componentType,props,function(node) {
			return new ex_AnimatedExample(node);
		},key);
	}
}
ex_AnimatedExample.__name__ = "ex.AnimatedExample";
ex_AnimatedExample.__super__ = blok_ui_Component;
Object.assign(ex_AnimatedExample.prototype, {
	__class__: ex_AnimatedExample
});
class ex_CollapseExample extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		this.__node.getProps();
	}
	render() {
		return blok_foundation_collapse_Collapse.node({ child : ex_Panel.node({ children : [ex_ExampleCollapseHeader.node({ child : blok_ui_Text.ofString("Collapse")}),ex_ExampleCollapseBody.node({ children : [blok_html_Html.p({ },blok_ui_Text.ofString("Some stuff"))]})]})});
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			_gthis.__node.getProps();
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_CollapseExample.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_CollapseExample.componentType,props,function(node) {
			return new ex_CollapseExample(node);
		},key);
	}
}
ex_CollapseExample.__name__ = "ex.CollapseExample";
ex_CollapseExample.__super__ = blok_ui_Component;
Object.assign(ex_CollapseExample.prototype, {
	__class__: ex_CollapseExample
});
class ex_ExampleCollapseHeader extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
	}
	render() {
		let collapse = blok_foundation_collapse_CollapseContext.from(this);
		let this1 = new blok_signal_SignalObject("font-weight-bold");
		let this2 = new blok_signal_SignalObject(function(_) {
			collapse.toggle();
		});
		let tmp = this.get_child();
		let tmp1 = blok_ui_Text.ofSignal(new blok_signal_ComputationObject(function() {
			if(collapse.status.get()) {
				return " -";
			} else {
				return " +";
			}
		},null));
		return blok_html_Html.button({ className : this1, onClick : this2},tmp,tmp1);
	}
	get_child() {
		return this.__backing_child.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_ExampleCollapseHeader.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_ExampleCollapseHeader.componentType,props,function(node) {
			return new ex_ExampleCollapseHeader(node);
		},key);
	}
}
ex_ExampleCollapseHeader.__name__ = "ex.ExampleCollapseHeader";
ex_ExampleCollapseHeader.__super__ = blok_ui_Component;
Object.assign(ex_ExampleCollapseHeader.prototype, {
	__class__: ex_ExampleCollapseHeader
});
class ex_ExampleCollapseBody extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_children = blok_signal_Signal.ofValue(props.children);
	}
	render() {
		let this1 = new blok_signal_SignalObject(breeze_ClassName.with("overflow-hidden","box-sizing-border"));
		let this2 = new blok_signal_SignalObject("p-15px");
		let tmp = this.get_children();
		return blok_foundation_collapse_CollapseItem.node({ child : blok_html_Html.div({ className : this1},blok_html_Html.div({ className : this2},...tmp))});
	}
	get_children() {
		return this.__backing_children.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_children.set(props.children);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_ExampleCollapseBody.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_ExampleCollapseBody.componentType,props,function(node) {
			return new ex_ExampleCollapseBody(node);
		},key);
	}
}
ex_ExampleCollapseBody.__name__ = "ex.ExampleCollapseBody";
ex_ExampleCollapseBody.__super__ = blok_ui_Component;
Object.assign(ex_ExampleCollapseBody.prototype, {
	__class__: ex_ExampleCollapseBody
});
class ex_Panel extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		let tmp = props.styles;
		this.__backing_styles = blok_signal_Signal.ofValue(tmp != null ? tmp : null);
		this.__backing_children = blok_signal_Signal.ofValue(props.children);
	}
	render() {
		let this1 = new blok_signal_SignalObject(breeze_ClassName.ofArray(["border-radius-0_5rem","border-black-0","border-0_125rem","p-1rem",this.get_styles()].slice()));
		let tmp = this.get_children();
		return blok_html_Html.div({ className : this1},...tmp);
	}
	get_styles() {
		return this.__backing_styles.get();
	}
	get_children() {
		return this.__backing_children.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_styles.set(props.styles);
			_gthis.__backing_children.set(props.children);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_Panel.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_Panel.componentType,props,function(node) {
			return new ex_Panel(node);
		},key);
	}
}
ex_Panel.__name__ = "ex.Panel";
ex_Panel.__super__ = blok_ui_Component;
Object.assign(ex_Panel.prototype, {
	__class__: ex_Panel
});
var ex_ButtonPriority = $hxEnums["ex.ButtonPriority"] = { __ename__:true,__constructs__:null
	,Primary: {_hx_name:"Primary",_hx_index:0,__enum__:"ex.ButtonPriority",toString:$estr}
	,Normal: {_hx_name:"Normal",_hx_index:1,__enum__:"ex.ButtonPriority",toString:$estr}
};
ex_ButtonPriority.__constructs__ = [ex_ButtonPriority.Primary,ex_ButtonPriority.Normal];
class ex_Button extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_action = blok_signal_Signal.ofValue(props.action);
		this.__backing_label = blok_signal_Signal.ofValue(props.label);
		let tmp = props.priority;
		this.__backing_priority = blok_signal_Signal.ofValue(tmp != null ? tmp : ex_ButtonPriority.Normal);
	}
	render() {
		let array = "p-y-0_25rem";
		let array1 = "p-x-0_75rem";
		let array2 = "font-weight-bold";
		let array3 = "border-radius-0_5rem";
		let array4 = "border-solid";
		let array5 = "border-0_125rem";
		let array6 = "border-black-0";
		let array7;
		switch(this.get_priority()._hx_index) {
		case 0:
			array7 = "bg-sky-200";
			break;
		case 1:
			array7 = null;
			break;
		}
		let this1 = new blok_signal_SignalObject(breeze_ClassName.ofArray([array,array1,array2,array3,array4,array5,array6,array7].slice()));
		let this2 = new blok_signal_SignalObject(this.get_action());
		let tmp = this.get_label();
		return blok_html_Html.button({ className : this1, onClick : this2},tmp);
	}
	get_action() {
		return this.__backing_action.get();
	}
	get_label() {
		return this.__backing_label.get();
	}
	get_priority() {
		return this.__backing_priority.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_action.set(props.action);
			_gthis.__backing_label.set(props.label);
			_gthis.__backing_priority.set(props.priority);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_Button.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_Button.componentType,props,function(node) {
			return new ex_Button(node);
		},key);
	}
}
ex_Button.__name__ = "ex.Button";
ex_Button.__super__ = blok_ui_Component;
Object.assign(ex_Button.prototype, {
	__class__: ex_Button
});
class ex_DropdownExample extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		this.__node.getProps();
	}
	render() {
		let tmp = blok_foundation_dropdown_Dropdown.node({ gap : 10, toggle : function(dropdown) {
			let transform = function(status) {
				if(status) {
					return "Close Dropdown";
				} else {
					return "Open Dropdown";
				}
			};
			let _gthis = dropdown.status;
			return ex_Button.node({ action : function(e) {
				e.preventDefault();
				e.stopPropagation();
				dropdown.toggle();
			}, label : blok_ui_Text.ofSignal(new blok_signal_ComputationObject(function() {
				return transform(_gthis.get());
			},null))});
		}, child : function(_) {
			let tmp = breeze_ClassName.ofArray(["bg-white-0","width-min-50px","layer-10","drop-shadow-xl"]);
			let this1 = new blok_signal_SignalObject(function(e) {
				e.stopPropagation();
			});
			let this2 = new blok_signal_SignalObject("p-0_25rem");
			let child = ex_ExampleDropdownItem.node({ onClick : function(_) {
				console.log("examples/ex/DropdownExample.hx:37:","one");
			}, child : blok_ui_Text.ofString("One")});
			let child1 = ex_ExampleDropdownItem.node({ onClick : function(_) {
				console.log("examples/ex/DropdownExample.hx:41:","two");
			}, child : blok_ui_Text.ofString("Two")});
			let child2 = ex_ExampleDropdownItem.node({ onClick : function(_) {
				console.log("examples/ex/DropdownExample.hx:45:","three");
			}, child : blok_ui_Text.ofString("Three")});
			return ex_Panel.node({ styles : tmp, children : [blok_html_Html.ul({ onClick : this1, className : this2},child,child1,child2)]});
		}});
		return blok_html_Html.div({ },tmp);
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			_gthis.__node.getProps();
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_DropdownExample.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_DropdownExample.componentType,props,function(node) {
			return new ex_DropdownExample(node);
		},key);
	}
}
ex_DropdownExample.__name__ = "ex.DropdownExample";
ex_DropdownExample.__super__ = blok_ui_Component;
Object.assign(ex_DropdownExample.prototype, {
	__class__: ex_DropdownExample
});
class ex_ExampleDropdownItem extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_child = blok_signal_Signal.ofValue(props.child);
		this.__backing_onClick = blok_signal_Signal.ofValue(props.onClick);
	}
	render() {
		let _gthis = this;
		let this1 = new blok_signal_SignalObject(function(e) {
			e.preventDefault();
			blok_foundation_dropdown_DropdownContext.from(_gthis).close();
			(_gthis.get_onClick())(e);
		});
		let this2 = new blok_signal_SignalObject("#");
		let tmp = this.get_child();
		let tmp1 = blok_foundation_dropdown_DropdownItem.node({ child : blok_html_Html.a({ onClick : this1, href : this2},tmp)});
		return blok_html_Html.li({ },tmp1);
	}
	get_child() {
		return this.__backing_child.get();
	}
	get_onClick() {
		return this.__backing_onClick.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_child.set(props.child);
			_gthis.__backing_onClick.set(props.onClick);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_ExampleDropdownItem.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_ExampleDropdownItem.componentType,props,function(node) {
			return new ex_ExampleDropdownItem(node);
		},key);
	}
}
ex_ExampleDropdownItem.__name__ = "ex.ExampleDropdownItem";
ex_ExampleDropdownItem.__super__ = blok_ui_Component;
Object.assign(ex_ExampleDropdownItem.prototype, {
	__class__: ex_ExampleDropdownItem
});
class ex_ModalExample extends blok_ui_Component {
	constructor(node) {
		blok_ui_ComponentBase._hx_skip_constructor = true;
		super();
		blok_ui_ComponentBase._hx_skip_constructor = false;
		this._hx_constructor(node);
	}
	_hx_constructor(node) {
		this.isOpen = blok_signal_Signal.ofValue(false);
		super._hx_constructor();
		this.__node = node;
		let props = this.__node.getProps();
		if(props.isOpen != null) {
			this.isOpen = blok_signal_Signal.ofValue(props.isOpen);
		}
	}
	render() {
		let _gthis = this;
		let tmp = ex_Button.node({ priority : ex_ButtonPriority.Primary, action : function(_) {
			_gthis.isOpen.set(true);
		}, label : blok_ui_Text.ofString("Open Modal")});
		let tmp1 = blok_ui_Scope.node({ child : function(_) {
			if(_gthis.isOpen.get()) {
				return ex_Modal.node({ onHide : function() {
					_gthis.isOpen.set(false);
				}, children : [blok_html_Html.div({ className : new blok_signal_SignalObject("p-bottom-1rem")},blok_ui_Text.ofString("Hey world")),blok_ui_Scope.node({ child : function(context) {
					return ex_Button.node({ action : function(_) {
						blok_foundation_layer_LayerContext.from(context).hide();
					}, label : blok_ui_Text.ofString("Ok")});
				}})]});
			} else {
				return blok_ui_Placeholder.node();
			}
		}});
		return blok_html_Html.div({ },tmp,tmp1);
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.isOpen.set(props.isOpen);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_ModalExample.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_ModalExample.componentType,props,function(node) {
			return new ex_ModalExample(node);
		},key);
	}
}
ex_ModalExample.__name__ = "ex.ModalExample";
ex_ModalExample.__super__ = blok_ui_Component;
Object.assign(ex_ModalExample.prototype, {
	__class__: ex_ModalExample
});
class ex_Modal extends blok_ui_Component {
	constructor(node) {
		super();
		this.__node = node;
		let props = this.__node.getProps();
		this.__backing_onHide = blok_signal_Signal.ofValue(props.onHide);
		this.__backing_children = blok_signal_Signal.ofValue(props.children);
		let tmp = props.hideOnEscape;
		this.__backing_hideOnEscape = blok_signal_Signal.ofValue(tmp != null ? tmp : true);
	}
	render() {
		let target = blok_foundation_core_PortalContext.from(this).target;
		let _gthis = this;
		return blok_foundation_core_ScrollLocked.node({ child : blok_ui_Portal.node({ target : target, child : function() {
			let child = breeze_ClassName.ofArray(["display-flex","align-items-center","justify-center","bg-rgba(0_0_0_0_5)"].slice());
			let child1 = _gthis.get_hideOnEscape();
			let child2 = _gthis.get_onHide();
			let this1 = new blok_signal_SignalObject(breeze_ClassName.ofArray(["bg-white-0","width-250px","border-radius-0_5rem","border-black-0","border-0_125rem","p-1rem"].slice()));
			let this2 = new blok_signal_SignalObject(function(e) {
				e.stopPropagation();
			});
			let this3 = new blok_signal_SignalObject("true");
			let this4 = new blok_signal_SignalObject(-1);
			let this5 = new blok_signal_SignalObject("dialog");
			let child3 = _gthis.get_children();
			return blok_foundation_layer_Layer.node({ className : child, hideOnEscape : child1, onHide : child2, child : blok_html_Html.div({ className : this1, onClick : this2, ariaModal : this3, tabIndex : this4, role : this5},...child3)});
		}},null)});
	}
	get_onHide() {
		return this.__backing_onHide.get();
	}
	get_children() {
		return this.__backing_children.get();
	}
	get_hideOnEscape() {
		return this.__backing_hideOnEscape.get();
	}
	setup() {
	}
	__updateProps() {
		let _gthis = this;
		blok_signal_Graph_batch(function() {
			let props = _gthis.__node.getProps();
			_gthis.__backing_onHide.set(props.onHide);
			_gthis.__backing_children.set(props.children);
			_gthis.__backing_hideOnEscape.set(props.hideOnEscape);
		});
	}
	canBeUpdatedByNode(node) {
		return node.type == ex_Modal.componentType;
	}
	static node(props,key) {
		return new blok_ui_VComponent(ex_Modal.componentType,props,function(node) {
			return new ex_Modal(node);
		},key);
	}
}
ex_Modal.__name__ = "ex.Modal";
ex_Modal.__super__ = blok_ui_Component;
Object.assign(ex_Modal.prototype, {
	__class__: ex_Modal
});
class haxe_IMap {
}
haxe_IMap.__name__ = "haxe.IMap";
haxe_IMap.__isInterface__ = true;
Object.assign(haxe_IMap.prototype, {
	__class__: haxe_IMap
});
class haxe_Timer {
	constructor(time_ms) {
		let me = this;
		this.id = setInterval(function() {
			me.run();
		},time_ms);
	}
	stop() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	run() {
	}
	static delay(f,time_ms) {
		let t = new haxe_Timer(time_ms);
		t.run = function() {
			t.stop();
			f();
		};
		return t;
	}
}
haxe_Timer.__name__ = "haxe.Timer";
Object.assign(haxe_Timer.prototype, {
	__class__: haxe_Timer
});
class haxe_ValueException extends haxe_Exception {
	constructor(value,previous,native) {
		super(String(value),previous,native);
		this.value = value;
	}
	unwrap() {
		return this.value;
	}
}
haxe_ValueException.__name__ = "haxe.ValueException";
haxe_ValueException.__super__ = haxe_Exception;
Object.assign(haxe_ValueException.prototype, {
	__class__: haxe_ValueException
});
class haxe_ds_IntMap {
	constructor() {
		this.h = { };
	}
	get(key) {
		return this.h[key];
	}
	remove(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) a.push(+key);
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i];
		}};
	}
}
haxe_ds_IntMap.__name__ = "haxe.ds.IntMap";
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_IntMap.prototype, {
	__class__: haxe_ds_IntMap
});
class haxe_ds__$List_ListNode {
	constructor(item,next) {
		this.item = item;
		this.next = next;
	}
}
haxe_ds__$List_ListNode.__name__ = "haxe.ds._List.ListNode";
Object.assign(haxe_ds__$List_ListNode.prototype, {
	__class__: haxe_ds__$List_ListNode
});
class haxe_ds__$List_ListIterator {
	constructor(head) {
		this.head = head;
	}
	hasNext() {
		return this.head != null;
	}
	next() {
		let val = this.head.item;
		this.head = this.head.next;
		return val;
	}
}
haxe_ds__$List_ListIterator.__name__ = "haxe.ds._List.ListIterator";
Object.assign(haxe_ds__$List_ListIterator.prototype, {
	__class__: haxe_ds__$List_ListIterator
});
class haxe_ds_ObjectMap {
	constructor() {
		this.h = { __keys__ : { }};
	}
	set(key,value) {
		let id = key.__id__;
		if(id == null) {
			id = (key.__id__ = $global.$haxeUID++);
		}
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	get(key) {
		return this.h[key.__id__];
	}
	remove(key) {
		let id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	keys() {
		let a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return new haxe_iterators_ArrayIterator(a);
	}
	iterator() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			let i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
}
haxe_ds_ObjectMap.__name__ = "haxe.ds.ObjectMap";
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_ObjectMap.prototype, {
	__class__: haxe_ds_ObjectMap
});
class haxe_ds_StringMap {
	constructor() {
		this.h = Object.create(null);
	}
	get(key) {
		return this.h[key];
	}
	keys() {
		return new haxe_ds__$StringMap_StringMapKeyIterator(this.h);
	}
	iterator() {
		return new haxe_ds__$StringMap_StringMapValueIterator(this.h);
	}
}
haxe_ds_StringMap.__name__ = "haxe.ds.StringMap";
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
Object.assign(haxe_ds_StringMap.prototype, {
	__class__: haxe_ds_StringMap
});
class haxe_ds__$StringMap_StringMapKeyIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.keys[this.current++];
	}
}
haxe_ds__$StringMap_StringMapKeyIterator.__name__ = "haxe.ds._StringMap.StringMapKeyIterator";
Object.assign(haxe_ds__$StringMap_StringMapKeyIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapKeyIterator
});
class haxe_ds__$StringMap_StringMapValueIterator {
	constructor(h) {
		this.h = h;
		this.keys = Object.keys(h);
		this.length = this.keys.length;
		this.current = 0;
	}
	hasNext() {
		return this.current < this.length;
	}
	next() {
		return this.h[this.keys[this.current++]];
	}
}
haxe_ds__$StringMap_StringMapValueIterator.__name__ = "haxe.ds._StringMap.StringMapValueIterator";
Object.assign(haxe_ds__$StringMap_StringMapValueIterator.prototype, {
	__class__: haxe_ds__$StringMap_StringMapValueIterator
});
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0;
		this.array = array;
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = "haxe.iterators.ArrayIterator";
Object.assign(haxe_iterators_ArrayIterator.prototype, {
	__class__: haxe_iterators_ArrayIterator
});
class js_Boot {
	static getClass(o) {
		if(o == null) {
			return null;
		} else if(((o) instanceof Array)) {
			return Array;
		} else {
			let cl = o.__class__;
			if(cl != null) {
				return cl;
			}
			let name = js_Boot.__nativeClassName(o);
			if(name != null) {
				return js_Boot.__resolveNativeClass(name);
			}
			return null;
		}
	}
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__];
				let con = e.__constructs__[o._hx_index];
				let n = con._hx_name;
				if(con.__params__) {
					s = s + "\t";
					return n + "(" + ((function($this) {
						var $r;
						let _g = [];
						{
							let _g1 = 0;
							let _g2 = con.__params__;
							while(true) {
								if(!(_g1 < _g2.length)) {
									break;
								}
								let p = _g2[_g1];
								_g1 = _g1 + 1;
								_g.push(js_Boot.__string_rec(o[p],s));
							}
						}
						$r = _g;
						return $r;
					}(this))).join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "[";
				s += "\t";
				let _g = 0;
				let _g1 = o.length;
				while(_g < _g1) {
					let i = _g++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr;
			try {
				tostr = o.toString;
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n";
			s += "\t";
			let hasp = o.hasOwnProperty != null;
			let k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
	static __interfLoop(cc,cl) {
		while(true) {
			if(cc == null) {
				return false;
			}
			if(cc == cl) {
				return true;
			}
			let intf = cc.__interfaces__;
			if(intf != null && (cc.__super__ == null || cc.__super__.__interfaces__ != intf)) {
				let _g = 0;
				let _g1 = intf.length;
				while(_g < _g1) {
					let i = _g++;
					let i1 = intf[i];
					if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
						return true;
					}
				}
			}
			cc = cc.__super__;
		}
	}
	static __instanceof(o,cl) {
		if(cl == null) {
			return false;
		}
		switch(cl) {
		case Array:
			return ((o) instanceof Array);
		case Bool:
			return typeof(o) == "boolean";
		case Dynamic:
			return o != null;
		case Float:
			return typeof(o) == "number";
		case Int:
			if(typeof(o) == "number") {
				return ((o | 0) === o);
			} else {
				return false;
			}
			break;
		case String:
			return typeof(o) == "string";
		default:
			if(o != null) {
				if(typeof(cl) == "function") {
					if(js_Boot.__downcastCheck(o,cl)) {
						return true;
					}
				} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
					if(((o) instanceof cl)) {
						return true;
					}
				}
			} else {
				return false;
			}
			if(cl == Class ? o.__name__ != null : false) {
				return true;
			}
			if(cl == Enum ? o.__ename__ != null : false) {
				return true;
			}
			return o.__enum__ != null ? $hxEnums[o.__enum__] == cl : false;
		}
	}
	static __downcastCheck(o,cl) {
		if(!((o) instanceof cl)) {
			if(cl.__isInterface__) {
				return js_Boot.__interfLoop(js_Boot.getClass(o),cl);
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	static __implements(o,iface) {
		return js_Boot.__interfLoop(js_Boot.getClass(o),iface);
	}
	static __nativeClassName(o) {
		let name = js_Boot.__toStr.call(o).slice(8,-1);
		if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
			return null;
		}
		return name;
	}
	static __isNativeObj(o) {
		return js_Boot.__nativeClassName(o) != null;
	}
	static __resolveNativeClass(name) {
		return $global[name];
	}
}
js_Boot.__name__ = "js.Boot";
class kit_SimpleLazyObject {
	constructor(resolve) {
		this.value = kit_Maybe.None;
		this.resolve = resolve;
	}
	get() {
		let _g = this.value;
		switch(_g._hx_index) {
		case 0:
			return _g.value;
		case 1:
			this.value = kit_Maybe.Some(this.resolve());
			return this.get();
		}
	}
}
kit_SimpleLazyObject.__name__ = "kit.SimpleLazyObject";
Object.assign(kit_SimpleLazyObject.prototype, {
	__class__: kit_SimpleLazyObject
});
class kit_MaybeTools {
	static map(maybe,transform) {
		switch(maybe._hx_index) {
		case 0:
			return kit_Maybe.Some(transform(maybe.value));
		case 1:
			return kit_Maybe.None;
		}
	}
	static flatMap(maybe,transform) {
		switch(maybe._hx_index) {
		case 0:
			return transform(maybe.value);
		case 1:
			return kit_Maybe.None;
		}
	}
	static or(maybe,value) {
		switch(maybe._hx_index) {
		case 0:
			return maybe.value;
		case 1:
			return value.get();
		}
	}
	static orThrow(maybe,message) {
		switch(maybe._hx_index) {
		case 0:
			return maybe.value;
		case 1:
			throw haxe_Exception.thrown(message == null ? "No value exists" : message);
		}
	}
}
kit_MaybeTools.__name__ = "kit.MaybeTools";
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
$global.$haxeUID |= 0;
if(typeof(performance) != "undefined" ? typeof(performance.now) == "function" : false) {
	HxOverrides.now = performance.now.bind(performance);
}
{
	Object.defineProperty(String.prototype,"__class__",{ value : String, enumerable : false, writable : true});
	String.__name__ = "String";
	Array.__name__ = "Array";
	var Int = { };
	var Dynamic = { };
	var Float = Number;
	var Bool = Boolean;
	var Class = { };
	var Enum = { };
}
js_Boot.__toStr = ({ }).toString;
blok_ui_ComponentBase._hx_skip_constructor = false;
kit_UniqueId.uid = 0;
blok_context_Provider.componentType = kit_UniqueId.uid++;
blok_data_Record._hx_skip_constructor = false;
blok_foundation_accordion_AccordionContext.__contextId = kit_UniqueId.uid++;
blok_foundation_animation_Animated.componentType = kit_UniqueId.uid++;
blok_foundation_collapse_Collapse.componentType = kit_UniqueId.uid++;
blok_foundation_collapse_CollapseContext.__contextId = kit_UniqueId.uid++;
blok_foundation_collapse_CollapseItem.componentType = kit_UniqueId.uid++;
blok_foundation_core_FocusContext.__contextId = kit_UniqueId.uid++;
blok_foundation_core_PortalContext.__contextId = kit_UniqueId.uid++;
blok_foundation_core_Positioned.componentType = kit_UniqueId.uid++;
blok_foundation_core_ScrollLocked.componentType = kit_UniqueId.uid++;
blok_foundation_dropdown_Dropdown.componentType = kit_UniqueId.uid++;
blok_foundation_dropdown_DropdownContainer.componentType = kit_UniqueId.uid++;
blok_foundation_dropdown_DropdownContext.__contextId = kit_UniqueId.uid++;
blok_foundation_dropdown_DropdownItem.componentType = kit_UniqueId.uid++;
blok_foundation_dropdown_DropdownPanel.componentType = kit_UniqueId.uid++;
blok_foundation_dropdown_DropdownToggle.componentType = kit_UniqueId.uid++;
blok_foundation_layer_Layer.componentType = kit_UniqueId.uid++;
blok_foundation_layer_LayerTarget.componentType = kit_UniqueId.uid++;
var blok_foundation_layer_Layer_DefaultShowAnimation = new blok_foundation_animation_Keyframes("show",function(context) {
	return [{ opacity : 0},{ opacity : 1}];
});
var blok_foundation_layer_Layer_DefaultHideAnimation = new blok_foundation_animation_Keyframes("hide",function(context) {
	return [{ opacity : 1},{ opacity : 0}];
});
blok_foundation_layer_LayerContainer.componentType = kit_UniqueId.uid++;
blok_foundation_layer_LayerContext.__contextId = kit_UniqueId.uid++;
blok_foundation_layer_Popover.componentType = kit_UniqueId.uid++;
blok_html_Html.__componentType_a = kit_UniqueId.uid++;
blok_html_Html.__componentType_button = kit_UniqueId.uid++;
blok_html_Html.__componentType_div = kit_UniqueId.uid++;
blok_html_Html.__componentType_li = kit_UniqueId.uid++;
blok_html_Html.__componentType_p = kit_UniqueId.uid++;
blok_html_Html.__componentType_ul = kit_UniqueId.uid++;
blok_html_client_Scheduler.hasRaf = typeof window != 'undefined' && 'requestAnimationFrame' in window;
blok_signal_Observer._hx_skip_constructor = false;
var blok_signal_Graph_currentOwner = kit_Maybe.None;
var blok_signal_Graph_currentConsumer = kit_Maybe.None;
var blok_signal_Graph_pending = new haxe_ds_List();
var blok_signal_Graph_depth = 0;
blok_ui_Fragment.componentType = kit_UniqueId.uid++;
blok_ui_Placeholder.componentType = kit_UniqueId.uid++;
blok_ui_Portal.componentType = kit_UniqueId.uid++;
blok_ui_RootComponent.componentType = kit_UniqueId.uid++;
blok_ui_Scope.componentType = kit_UniqueId.uid++;
blok_ui_TextComponent.componentType = kit_UniqueId.uid++;
ex_AnimatedExample.componentType = kit_UniqueId.uid++;
ex_CollapseExample.componentType = kit_UniqueId.uid++;
ex_ExampleCollapseHeader.componentType = kit_UniqueId.uid++;
ex_ExampleCollapseBody.componentType = kit_UniqueId.uid++;
ex_Panel.componentType = kit_UniqueId.uid++;
ex_Button.componentType = kit_UniqueId.uid++;
ex_DropdownExample.componentType = kit_UniqueId.uid++;
ex_ExampleDropdownItem.componentType = kit_UniqueId.uid++;
ex_ModalExample.componentType = kit_UniqueId.uid++;
ex_Modal.componentType = kit_UniqueId.uid++;
Run_main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

//# sourceMappingURL=test.js.map